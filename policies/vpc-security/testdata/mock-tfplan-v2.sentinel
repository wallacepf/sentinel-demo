terraform_version = "1.1.4"

planned_values = {
	"outputs": {
		"instance_public_ip": {
			"name":      "instance_public_ip",
			"sensitive": false,
			"value":     undefined,
		},
	},
	"resources": {
		"aws_instance.demo_server": {
			"address":        "aws_instance.demo_server",
			"depends_on":     [],
			"deposed_key":    "",
			"index":          null,
			"mode":           "managed",
			"module_address": "",
			"name":           "demo_server",
			"provider_name":  "registry.terraform.io/hashicorp/aws",
			"tainted":        false,
			"type":           "aws_instance",
			"values": {
				"ami":                  "ami-02e136e904f3da870",
				"availability_zone":    "us-east-1a",
				"credit_specification": [],
				"get_password_data":    false,
				"hibernation":          null,
				"iam_instance_profile": null,
				"instance_type":        "t2.micro",
				"launch_template":      [],
				"source_dest_check":    true,
				"tags": {
					"Owner":   "Demo",
					"Purpose": "Lab",
				},
				"tags_all": {
					"Owner":   "Demo",
					"Purpose": "Lab",
				},
				"timeouts":    null,
				"volume_tags": null,
			},
		},
		"aws_subnet.external": {
			"address":        "aws_subnet.external",
			"depends_on":     [],
			"deposed_key":    "",
			"index":          null,
			"mode":           "managed",
			"module_address": "",
			"name":           "external",
			"provider_name":  "registry.terraform.io/hashicorp/aws",
			"tainted":        false,
			"type":           "aws_subnet",
			"values": {
				"assign_ipv6_address_on_creation":                false,
				"availability_zone":                              "us-east-1b",
				"cidr_block":                                     "10.0.2.0/24",
				"customer_owned_ipv4_pool":                       null,
				"enable_dns64":                                   false,
				"enable_resource_name_dns_a_record_on_launch":    false,
				"enable_resource_name_dns_aaaa_record_on_launch": false,
				"ipv6_cidr_block":                                null,
				"ipv6_native":                                    false,
				"map_customer_owned_ip_on_launch":                null,
				"map_public_ip_on_launch":                        false,
				"outpost_arn":                                    null,
				"tags": {
					"Owner":   "Demo",
					"Purpose": "Lab",
				},
				"tags_all": {
					"Owner":   "Demo",
					"Purpose": "Lab",
				},
				"timeouts": null,
			},
		},
		"aws_subnet.internal": {
			"address":        "aws_subnet.internal",
			"depends_on":     [],
			"deposed_key":    "",
			"index":          null,
			"mode":           "managed",
			"module_address": "",
			"name":           "internal",
			"provider_name":  "registry.terraform.io/hashicorp/aws",
			"tainted":        false,
			"type":           "aws_subnet",
			"values": {
				"assign_ipv6_address_on_creation":                false,
				"availability_zone":                              "us-east-1a",
				"cidr_block":                                     "10.0.1.0/24",
				"customer_owned_ipv4_pool":                       null,
				"enable_dns64":                                   false,
				"enable_resource_name_dns_a_record_on_launch":    false,
				"enable_resource_name_dns_aaaa_record_on_launch": false,
				"ipv6_cidr_block":                                null,
				"ipv6_native":                                    false,
				"map_customer_owned_ip_on_launch":                null,
				"map_public_ip_on_launch":                        false,
				"outpost_arn":                                    null,
				"tags": {
					"Owner":   "Demo",
					"Purpose": "Lab",
				},
				"tags_all": {
					"Owner":   "Demo",
					"Purpose": "Lab",
				},
				"timeouts": null,
			},
		},
		"aws_vpc.demo": {
			"address":        "aws_vpc.demo",
			"depends_on":     [],
			"deposed_key":    "",
			"index":          null,
			"mode":           "managed",
			"module_address": "",
			"name":           "demo",
			"provider_name":  "registry.terraform.io/hashicorp/aws",
			"tainted":        false,
			"type":           "aws_vpc",
			"values": {
				"assign_generated_ipv6_cidr_block": null,
				"cidr_block":                       "10.0.0.0/16",
				"enable_dns_support":               true,
				"instance_tenancy":                 "default",
				"ipv4_ipam_pool_id":                null,
				"ipv4_netmask_length":              null,
				"ipv6_ipam_pool_id":                null,
				"ipv6_netmask_length":              null,
				"tags":                             null,
			},
		},
		"module.security_group.aws_security_group.this_name_prefix[0]": {
			"address":        "module.security_group.aws_security_group.this_name_prefix[0]",
			"depends_on":     [],
			"deposed_key":    "",
			"index":          0,
			"mode":           "managed",
			"module_address": "module.security_group",
			"name":           "this_name_prefix",
			"provider_name":  "registry.terraform.io/hashicorp/aws",
			"tainted":        false,
			"type":           "aws_security_group",
			"values": {
				"description":            "Security Group managed by Terraform",
				"name_prefix":            "my-sg-",
				"revoke_rules_on_delete": false,
				"tags": {
					"Name": "my-sg",
				},
				"tags_all": {
					"Name": "my-sg",
				},
				"timeouts": {
					"create": "10m",
					"delete": "15m",
				},
			},
		},
		"module.security_group.aws_security_group_rule.egress_rules[0]": {
			"address":        "module.security_group.aws_security_group_rule.egress_rules[0]",
			"depends_on":     [],
			"deposed_key":    "",
			"index":          0,
			"mode":           "managed",
			"module_address": "module.security_group",
			"name":           "egress_rules",
			"provider_name":  "registry.terraform.io/hashicorp/aws",
			"tainted":        false,
			"type":           "aws_security_group_rule",
			"values": {
				"cidr_blocks": [
					"0.0.0.0/0",
				],
				"description": "All protocols",
				"from_port":   -1,
				"ipv6_cidr_blocks": [
					"::/0",
				],
				"prefix_list_ids": [],
				"protocol":        "-1",
				"self":            false,
				"to_port":         -1,
				"type":            "egress",
			},
		},
		"module.security_group.aws_security_group_rule.ingress_rules[0]": {
			"address":        "module.security_group.aws_security_group_rule.ingress_rules[0]",
			"depends_on":     [],
			"deposed_key":    "",
			"index":          0,
			"mode":           "managed",
			"module_address": "module.security_group",
			"name":           "ingress_rules",
			"provider_name":  "registry.terraform.io/hashicorp/aws",
			"tainted":        false,
			"type":           "aws_security_group_rule",
			"values": {
				"cidr_blocks": [
					"0.0.0.0/0",
				],
				"description":      "HTTP",
				"from_port":        80,
				"ipv6_cidr_blocks": [],
				"prefix_list_ids":  [],
				"protocol":         "tcp",
				"self":             false,
				"to_port":          80,
				"type":             "ingress",
			},
		},
		"module.security_group.aws_security_group_rule.ingress_rules[1]": {
			"address":        "module.security_group.aws_security_group_rule.ingress_rules[1]",
			"depends_on":     [],
			"deposed_key":    "",
			"index":          1,
			"mode":           "managed",
			"module_address": "module.security_group",
			"name":           "ingress_rules",
			"provider_name":  "registry.terraform.io/hashicorp/aws",
			"tainted":        false,
			"type":           "aws_security_group_rule",
			"values": {
				"cidr_blocks": [
					"0.0.0.0/0",
				],
				"description":      "All IPV4 ICMP",
				"from_port":        -1,
				"ipv6_cidr_blocks": [],
				"prefix_list_ids":  [],
				"protocol":         "icmp",
				"self":             false,
				"to_port":          -1,
				"type":             "ingress",
			},
		},
	},
}

variables = {}

resource_changes = {
	"aws_instance.demo_server": {
		"address": "aws_instance.demo_server",
		"change": {
			"actions": [
				"create",
			],
			"after": {
				"ami":                  "ami-02e136e904f3da870",
				"availability_zone":    "us-east-1a",
				"credit_specification": [],
				"get_password_data":    false,
				"hibernation":          null,
				"iam_instance_profile": null,
				"instance_type":        "t2.micro",
				"launch_template":      [],
				"source_dest_check":    true,
				"tags": {
					"Owner":   "Demo",
					"Purpose": "Lab",
				},
				"tags_all": {
					"Owner":   "Demo",
					"Purpose": "Lab",
				},
				"timeouts":    null,
				"volume_tags": null,
			},
			"after_unknown": {
				"arn": true,
				"associate_public_ip_address":        true,
				"capacity_reservation_specification": true,
				"cpu_core_count":                     true,
				"cpu_threads_per_core":               true,
				"credit_specification":               [],
				"disable_api_termination":            true,
				"ebs_block_device":                   true,
				"ebs_optimized":                      true,
				"enclave_options":                    true,
				"ephemeral_block_device":             true,
				"host_id":                            true,
				"id":                                 true,
				"instance_initiated_shutdown_behavior": true,
				"instance_state":                       true,
				"ipv6_address_count":                   true,
				"ipv6_addresses":                       true,
				"key_name":                             true,
				"launch_template":                      [],
				"metadata_options":                     true,
				"monitoring":                           true,
				"network_interface":                    true,
				"outpost_arn":                          true,
				"password_data":                        true,
				"placement_group":                      true,
				"placement_partition_number":           true,
				"primary_network_interface_id":         true,
				"private_dns":                          true,
				"private_ip":                           true,
				"public_dns":                           true,
				"public_ip":                            true,
				"root_block_device":                    true,
				"secondary_private_ips":                true,
				"security_groups":                      true,
				"subnet_id":                            true,
				"tags":                                 {},
				"tags_all":                             {},
				"tenancy":                              true,
				"user_data":                            true,
				"user_data_base64":                     true,
				"vpc_security_group_ids":               true,
			},
			"before": null,
		},
		"deposed":        "",
		"index":          null,
		"mode":           "managed",
		"module_address": "",
		"name":           "demo_server",
		"provider_name":  "registry.terraform.io/hashicorp/aws",
		"type":           "aws_instance",
	},
	"aws_subnet.external": {
		"address": "aws_subnet.external",
		"change": {
			"actions": [
				"create",
			],
			"after": {
				"assign_ipv6_address_on_creation":                false,
				"availability_zone":                              "us-east-1b",
				"cidr_block":                                     "10.0.2.0/24",
				"customer_owned_ipv4_pool":                       null,
				"enable_dns64":                                   false,
				"enable_resource_name_dns_a_record_on_launch":    false,
				"enable_resource_name_dns_aaaa_record_on_launch": false,
				"ipv6_cidr_block":                                null,
				"ipv6_native":                                    false,
				"map_customer_owned_ip_on_launch":                null,
				"map_public_ip_on_launch":                        false,
				"outpost_arn":                                    null,
				"tags": {
					"Owner":   "Demo",
					"Purpose": "Lab",
				},
				"tags_all": {
					"Owner":   "Demo",
					"Purpose": "Lab",
				},
				"timeouts": null,
			},
			"after_unknown": {
				"arn": true,
				"availability_zone_id": true,
				"id": true,
				"ipv6_cidr_block_association_id":      true,
				"owner_id":                            true,
				"private_dns_hostname_type_on_launch": true,
				"tags":     {},
				"tags_all": {},
				"vpc_id":   true,
			},
			"before": null,
		},
		"deposed":        "",
		"index":          null,
		"mode":           "managed",
		"module_address": "",
		"name":           "external",
		"provider_name":  "registry.terraform.io/hashicorp/aws",
		"type":           "aws_subnet",
	},
	"aws_subnet.internal": {
		"address": "aws_subnet.internal",
		"change": {
			"actions": [
				"create",
			],
			"after": {
				"assign_ipv6_address_on_creation":                false,
				"availability_zone":                              "us-east-1a",
				"cidr_block":                                     "10.0.1.0/24",
				"customer_owned_ipv4_pool":                       null,
				"enable_dns64":                                   false,
				"enable_resource_name_dns_a_record_on_launch":    false,
				"enable_resource_name_dns_aaaa_record_on_launch": false,
				"ipv6_cidr_block":                                null,
				"ipv6_native":                                    false,
				"map_customer_owned_ip_on_launch":                null,
				"map_public_ip_on_launch":                        false,
				"outpost_arn":                                    null,
				"tags": {
					"Owner":   "Demo",
					"Purpose": "Lab",
				},
				"tags_all": {
					"Owner":   "Demo",
					"Purpose": "Lab",
				},
				"timeouts": null,
			},
			"after_unknown": {
				"arn": true,
				"availability_zone_id": true,
				"id": true,
				"ipv6_cidr_block_association_id":      true,
				"owner_id":                            true,
				"private_dns_hostname_type_on_launch": true,
				"tags":     {},
				"tags_all": {},
				"vpc_id":   true,
			},
			"before": null,
		},
		"deposed":        "",
		"index":          null,
		"mode":           "managed",
		"module_address": "",
		"name":           "internal",
		"provider_name":  "registry.terraform.io/hashicorp/aws",
		"type":           "aws_subnet",
	},
	"aws_vpc.demo": {
		"address": "aws_vpc.demo",
		"change": {
			"actions": [
				"create",
			],
			"after": {
				"assign_generated_ipv6_cidr_block": null,
				"cidr_block":                       "10.0.0.0/16",
				"enable_dns_support":               true,
				"instance_tenancy":                 "default",
				"ipv4_ipam_pool_id":                null,
				"ipv4_netmask_length":              null,
				"ipv6_ipam_pool_id":                null,
				"ipv6_netmask_length":              null,
				"tags":                             null,
			},
			"after_unknown": {
				"arn": true,
				"default_network_acl_id":         true,
				"default_route_table_id":         true,
				"default_security_group_id":      true,
				"dhcp_options_id":                true,
				"enable_classiclink":             true,
				"enable_classiclink_dns_support": true,
				"enable_dns_hostnames":           true,
				"id": true,
				"ipv6_association_id":                  true,
				"ipv6_cidr_block":                      true,
				"ipv6_cidr_block_network_border_group": true,
				"main_route_table_id":                  true,
				"owner_id":                             true,
				"tags_all":                             true,
			},
			"before": null,
		},
		"deposed":        "",
		"index":          null,
		"mode":           "managed",
		"module_address": "",
		"name":           "demo",
		"provider_name":  "registry.terraform.io/hashicorp/aws",
		"type":           "aws_vpc",
	},
	"module.security_group.aws_security_group.this_name_prefix[0]": {
		"address": "module.security_group.aws_security_group.this_name_prefix[0]",
		"change": {
			"actions": [
				"create",
			],
			"after": {
				"description":            "Security Group managed by Terraform",
				"name_prefix":            "my-sg-",
				"revoke_rules_on_delete": false,
				"tags": {
					"Name": "my-sg",
				},
				"tags_all": {
					"Name": "my-sg",
				},
				"timeouts": {
					"create": "10m",
					"delete": "15m",
				},
			},
			"after_unknown": {
				"arn":      true,
				"egress":   true,
				"id":       true,
				"ingress":  true,
				"name":     true,
				"owner_id": true,
				"tags":     {},
				"tags_all": {},
				"timeouts": {},
				"vpc_id":   true,
			},
			"before": null,
		},
		"deposed":        "",
		"index":          0,
		"mode":           "managed",
		"module_address": "module.security_group",
		"name":           "this_name_prefix",
		"provider_name":  "registry.terraform.io/hashicorp/aws",
		"type":           "aws_security_group",
	},
	"module.security_group.aws_security_group_rule.egress_rules[0]": {
		"address": "module.security_group.aws_security_group_rule.egress_rules[0]",
		"change": {
			"actions": [
				"create",
			],
			"after": {
				"cidr_blocks": [
					"0.0.0.0/0",
				],
				"description": "All protocols",
				"from_port":   -1,
				"ipv6_cidr_blocks": [
					"::/0",
				],
				"prefix_list_ids": [],
				"protocol":        "-1",
				"self":            false,
				"to_port":         -1,
				"type":            "egress",
			},
			"after_unknown": {
				"cidr_blocks": [
					false,
				],
				"id": true,
				"ipv6_cidr_blocks": [
					false,
				],
				"prefix_list_ids":          [],
				"security_group_id":        true,
				"source_security_group_id": true,
			},
			"before": null,
		},
		"deposed":        "",
		"index":          0,
		"mode":           "managed",
		"module_address": "module.security_group",
		"name":           "egress_rules",
		"provider_name":  "registry.terraform.io/hashicorp/aws",
		"type":           "aws_security_group_rule",
	},
	"module.security_group.aws_security_group_rule.ingress_rules[0]": {
		"address": "module.security_group.aws_security_group_rule.ingress_rules[0]",
		"change": {
			"actions": [
				"create",
			],
			"after": {
				"cidr_blocks": [
					"0.0.0.0/0",
				],
				"description":      "HTTP",
				"from_port":        80,
				"ipv6_cidr_blocks": [],
				"prefix_list_ids":  [],
				"protocol":         "tcp",
				"self":             false,
				"to_port":          80,
				"type":             "ingress",
			},
			"after_unknown": {
				"cidr_blocks": [
					false,
				],
				"id":                       true,
				"ipv6_cidr_blocks":         [],
				"prefix_list_ids":          [],
				"security_group_id":        true,
				"source_security_group_id": true,
			},
			"before": null,
		},
		"deposed":        "",
		"index":          0,
		"mode":           "managed",
		"module_address": "module.security_group",
		"name":           "ingress_rules",
		"provider_name":  "registry.terraform.io/hashicorp/aws",
		"type":           "aws_security_group_rule",
	},
	"module.security_group.aws_security_group_rule.ingress_rules[1]": {
		"address": "module.security_group.aws_security_group_rule.ingress_rules[1]",
		"change": {
			"actions": [
				"create",
			],
			"after": {
				"cidr_blocks": [
					"0.0.0.0/0",
				],
				"description":      "All IPV4 ICMP",
				"from_port":        -1,
				"ipv6_cidr_blocks": [],
				"prefix_list_ids":  [],
				"protocol":         "icmp",
				"self":             false,
				"to_port":          -1,
				"type":             "ingress",
			},
			"after_unknown": {
				"cidr_blocks": [
					false,
				],
				"id":                       true,
				"ipv6_cidr_blocks":         [],
				"prefix_list_ids":          [],
				"security_group_id":        true,
				"source_security_group_id": true,
			},
			"before": null,
		},
		"deposed":        "",
		"index":          1,
		"mode":           "managed",
		"module_address": "module.security_group",
		"name":           "ingress_rules",
		"provider_name":  "registry.terraform.io/hashicorp/aws",
		"type":           "aws_security_group_rule",
	},
}

output_changes = {
	"instance_public_ip": {
		"change": {
			"actions": [
				"create",
			],
			"after":         undefined,
			"after_unknown": true,
			"before":        null,
		},
		"name": "instance_public_ip",
	},
}

raw = {
	"configuration": {
		"provider_config": {
			"aws": {
				"expressions": {
					"region": {
						"constant_value": "us-east-1",
					},
				},
				"name": "aws",
			},
			"module.security_group:aws": {
				"module_address":     "module.security_group",
				"name":               "aws",
				"version_constraint": ">= 3.0.0",
			},
		},
		"root_module": {
			"module_calls": {
				"security_group": {
					"expressions": {
						"egress_rules": {
							"constant_value": [
								"all-all",
							],
						},
						"ingress_cidr_blocks": {
							"constant_value": [
								"0.0.0.0/0",
							],
						},
						"ingress_rules": {
							"constant_value": [
								"http-80-tcp",
								"all-icmp",
							],
						},
						"name": {
							"constant_value": "my-sg",
						},
						"vpc_id": {
							"references": [
								"aws_vpc.demo.id",
								"aws_vpc.demo",
							],
						},
					},
					"module": {
						"outputs": {
							"security_group_description": {
								"description": "The description of the security group",
								"expression": {
									"references": [
										"aws_security_group.this[0].description",
										"aws_security_group.this[0]",
										"aws_security_group.this",
										"aws_security_group.this_name_prefix[0].description",
										"aws_security_group.this_name_prefix[0]",
										"aws_security_group.this_name_prefix",
									],
								},
							},
							"security_group_id": {
								"description": "The ID of the security group",
								"expression": {
									"references": [
										"aws_security_group.this[0].id",
										"aws_security_group.this[0]",
										"aws_security_group.this",
										"aws_security_group.this_name_prefix[0].id",
										"aws_security_group.this_name_prefix[0]",
										"aws_security_group.this_name_prefix",
									],
								},
							},
							"security_group_name": {
								"description": "The name of the security group",
								"expression": {
									"references": [
										"aws_security_group.this[0].name",
										"aws_security_group.this[0]",
										"aws_security_group.this",
										"aws_security_group.this_name_prefix[0].name",
										"aws_security_group.this_name_prefix[0]",
										"aws_security_group.this_name_prefix",
									],
								},
							},
							"security_group_owner_id": {
								"description": "The owner ID",
								"expression": {
									"references": [
										"aws_security_group.this[0].owner_id",
										"aws_security_group.this[0]",
										"aws_security_group.this",
										"aws_security_group.this_name_prefix[0].owner_id",
										"aws_security_group.this_name_prefix[0]",
										"aws_security_group.this_name_prefix",
									],
								},
							},
							"security_group_vpc_id": {
								"description": "The VPC ID",
								"expression": {
									"references": [
										"aws_security_group.this[0].vpc_id",
										"aws_security_group.this[0]",
										"aws_security_group.this",
										"aws_security_group.this_name_prefix[0].vpc_id",
										"aws_security_group.this_name_prefix[0]",
										"aws_security_group.this_name_prefix",
									],
								},
							},
						},
						"resources": [
							{
								"address": "aws_security_group.this",
								"count_expression": {
									"references": [
										"var.create",
										"var.create_sg",
										"var.use_name_prefix",
									],
								},
								"expressions": {
									"description": {
										"references": [
											"var.description",
										],
									},
									"name": {
										"references": [
											"var.name",
										],
									},
									"revoke_rules_on_delete": {
										"references": [
											"var.revoke_rules_on_delete",
										],
									},
									"tags": {
										"references": [
											"var.name",
											"var.tags",
										],
									},
									"timeouts": {},
									"vpc_id": {
										"references": [
											"var.vpc_id",
										],
									},
								},
								"mode":                "managed",
								"name":                "this",
								"provider_config_key": "security_group:aws",
								"schema_version":      1,
								"type":                "aws_security_group",
							},
							{
								"address": "aws_security_group.this_name_prefix",
								"count_expression": {
									"references": [
										"var.create",
										"var.create_sg",
										"var.use_name_prefix",
									],
								},
								"expressions": {
									"description": {
										"references": [
											"var.description",
										],
									},
									"name_prefix": {
										"references": [
											"var.name",
										],
									},
									"revoke_rules_on_delete": {
										"references": [
											"var.revoke_rules_on_delete",
										],
									},
									"tags": {
										"references": [
											"var.name",
											"var.tags",
										],
									},
									"timeouts": {},
									"vpc_id": {
										"references": [
											"var.vpc_id",
										],
									},
								},
								"mode":                "managed",
								"name":                "this_name_prefix",
								"provider_config_key": "security_group:aws",
								"schema_version":      1,
								"type":                "aws_security_group",
							},
							{
								"address": "aws_security_group_rule.computed_egress_rules",
								"count_expression": {
									"references": [
										"var.create",
										"var.number_of_computed_egress_rules",
									],
								},
								"expressions": {
									"cidr_blocks": {
										"references": [
											"var.egress_cidr_blocks",
										],
									},
									"description": {
										"references": [
											"var.rules",
											"var.computed_egress_rules",
											"count.index",
										],
									},
									"from_port": {
										"references": [
											"var.rules",
											"var.computed_egress_rules",
											"count.index",
										],
									},
									"ipv6_cidr_blocks": {
										"references": [
											"var.egress_ipv6_cidr_blocks",
										],
									},
									"prefix_list_ids": {
										"references": [
											"var.egress_prefix_list_ids",
										],
									},
									"protocol": {
										"references": [
											"var.rules",
											"var.computed_egress_rules",
											"count.index",
										],
									},
									"security_group_id": {
										"references": [
											"local.this_sg_id",
										],
									},
									"to_port": {
										"references": [
											"var.rules",
											"var.computed_egress_rules",
											"count.index",
										],
									},
									"type": {
										"constant_value": "egress",
									},
								},
								"mode":                "managed",
								"name":                "computed_egress_rules",
								"provider_config_key": "security_group:aws",
								"schema_version":      2,
								"type":                "aws_security_group_rule",
							},
							{
								"address": "aws_security_group_rule.computed_egress_with_cidr_blocks",
								"count_expression": {
									"references": [
										"var.create",
										"var.number_of_computed_egress_with_cidr_blocks",
									],
								},
								"expressions": {
									"cidr_blocks": {
										"references": [
											"var.computed_egress_with_cidr_blocks",
											"count.index",
											"var.egress_cidr_blocks",
										],
									},
									"description": {
										"references": [
											"var.computed_egress_with_cidr_blocks",
											"count.index",
										],
									},
									"from_port": {
										"references": [
											"var.computed_egress_with_cidr_blocks",
											"count.index",
											"var.rules",
											"var.computed_egress_with_cidr_blocks",
											"count.index",
										],
									},
									"prefix_list_ids": {
										"references": [
											"var.egress_prefix_list_ids",
										],
									},
									"protocol": {
										"references": [
											"var.computed_egress_with_cidr_blocks",
											"count.index",
											"var.rules",
											"var.computed_egress_with_cidr_blocks",
											"count.index",
										],
									},
									"security_group_id": {
										"references": [
											"local.this_sg_id",
										],
									},
									"to_port": {
										"references": [
											"var.computed_egress_with_cidr_blocks",
											"count.index",
											"var.rules",
											"var.computed_egress_with_cidr_blocks",
											"count.index",
										],
									},
									"type": {
										"constant_value": "egress",
									},
								},
								"mode":                "managed",
								"name":                "computed_egress_with_cidr_blocks",
								"provider_config_key": "security_group:aws",
								"schema_version":      2,
								"type":                "aws_security_group_rule",
							},
							{
								"address": "aws_security_group_rule.computed_egress_with_ipv6_cidr_blocks",
								"count_expression": {
									"references": [
										"var.create",
										"var.number_of_computed_egress_with_ipv6_cidr_blocks",
									],
								},
								"expressions": {
									"description": {
										"references": [
											"var.computed_egress_with_ipv6_cidr_blocks",
											"count.index",
										],
									},
									"from_port": {
										"references": [
											"var.computed_egress_with_ipv6_cidr_blocks",
											"count.index",
											"var.rules",
											"var.computed_egress_with_ipv6_cidr_blocks",
											"count.index",
										],
									},
									"ipv6_cidr_blocks": {
										"references": [
											"var.computed_egress_with_ipv6_cidr_blocks",
											"count.index",
											"var.egress_ipv6_cidr_blocks",
										],
									},
									"prefix_list_ids": {
										"references": [
											"var.egress_prefix_list_ids",
										],
									},
									"protocol": {
										"references": [
											"var.computed_egress_with_ipv6_cidr_blocks",
											"count.index",
											"var.rules",
											"var.computed_egress_with_ipv6_cidr_blocks",
											"count.index",
										],
									},
									"security_group_id": {
										"references": [
											"local.this_sg_id",
										],
									},
									"to_port": {
										"references": [
											"var.computed_egress_with_ipv6_cidr_blocks",
											"count.index",
											"var.rules",
											"var.computed_egress_with_ipv6_cidr_blocks",
											"count.index",
										],
									},
									"type": {
										"constant_value": "egress",
									},
								},
								"mode":                "managed",
								"name":                "computed_egress_with_ipv6_cidr_blocks",
								"provider_config_key": "security_group:aws",
								"schema_version":      2,
								"type":                "aws_security_group_rule",
							},
							{
								"address": "aws_security_group_rule.computed_egress_with_self",
								"count_expression": {
									"references": [
										"var.create",
										"var.number_of_computed_egress_with_self",
									],
								},
								"expressions": {
									"description": {
										"references": [
											"var.computed_egress_with_self",
											"count.index",
										],
									},
									"from_port": {
										"references": [
											"var.computed_egress_with_self",
											"count.index",
											"var.rules",
											"var.computed_egress_with_self",
											"count.index",
										],
									},
									"prefix_list_ids": {
										"references": [
											"var.egress_prefix_list_ids",
										],
									},
									"protocol": {
										"references": [
											"var.computed_egress_with_self",
											"count.index",
											"var.rules",
											"var.computed_egress_with_self",
											"count.index",
										],
									},
									"security_group_id": {
										"references": [
											"local.this_sg_id",
										],
									},
									"self": {
										"references": [
											"var.computed_egress_with_self",
											"count.index",
										],
									},
									"to_port": {
										"references": [
											"var.computed_egress_with_self",
											"count.index",
											"var.rules",
											"var.computed_egress_with_self",
											"count.index",
										],
									},
									"type": {
										"constant_value": "egress",
									},
								},
								"mode":                "managed",
								"name":                "computed_egress_with_self",
								"provider_config_key": "security_group:aws",
								"schema_version":      2,
								"type":                "aws_security_group_rule",
							},
							{
								"address": "aws_security_group_rule.computed_egress_with_source_security_group_id",
								"count_expression": {
									"references": [
										"var.create",
										"var.number_of_computed_egress_with_source_security_group_id",
									],
								},
								"expressions": {
									"description": {
										"references": [
											"var.computed_egress_with_source_security_group_id",
											"count.index",
										],
									},
									"from_port": {
										"references": [
											"var.computed_egress_with_source_security_group_id",
											"count.index",
											"var.rules",
											"var.computed_egress_with_source_security_group_id",
											"count.index",
										],
									},
									"prefix_list_ids": {
										"references": [
											"var.egress_prefix_list_ids",
										],
									},
									"protocol": {
										"references": [
											"var.computed_egress_with_source_security_group_id",
											"count.index",
											"var.rules",
											"var.computed_egress_with_source_security_group_id",
											"count.index",
										],
									},
									"security_group_id": {
										"references": [
											"local.this_sg_id",
										],
									},
									"source_security_group_id": {
										"references": [
											"var.computed_egress_with_source_security_group_id",
											"count.index",
										],
									},
									"to_port": {
										"references": [
											"var.computed_egress_with_source_security_group_id",
											"count.index",
											"var.rules",
											"var.computed_egress_with_source_security_group_id",
											"count.index",
										],
									},
									"type": {
										"constant_value": "egress",
									},
								},
								"mode":                "managed",
								"name":                "computed_egress_with_source_security_group_id",
								"provider_config_key": "security_group:aws",
								"schema_version":      2,
								"type":                "aws_security_group_rule",
							},
							{
								"address": "aws_security_group_rule.computed_ingress_rules",
								"count_expression": {
									"references": [
										"var.create",
										"var.number_of_computed_ingress_rules",
									],
								},
								"expressions": {
									"cidr_blocks": {
										"references": [
											"var.ingress_cidr_blocks",
										],
									},
									"description": {
										"references": [
											"var.rules",
											"var.computed_ingress_rules",
											"count.index",
										],
									},
									"from_port": {
										"references": [
											"var.rules",
											"var.computed_ingress_rules",
											"count.index",
										],
									},
									"ipv6_cidr_blocks": {
										"references": [
											"var.ingress_ipv6_cidr_blocks",
										],
									},
									"prefix_list_ids": {
										"references": [
											"var.ingress_prefix_list_ids",
										],
									},
									"protocol": {
										"references": [
											"var.rules",
											"var.computed_ingress_rules",
											"count.index",
										],
									},
									"security_group_id": {
										"references": [
											"local.this_sg_id",
										],
									},
									"to_port": {
										"references": [
											"var.rules",
											"var.computed_ingress_rules",
											"count.index",
										],
									},
									"type": {
										"constant_value": "ingress",
									},
								},
								"mode":                "managed",
								"name":                "computed_ingress_rules",
								"provider_config_key": "security_group:aws",
								"schema_version":      2,
								"type":                "aws_security_group_rule",
							},
							{
								"address": "aws_security_group_rule.computed_ingress_with_cidr_blocks",
								"count_expression": {
									"references": [
										"var.create",
										"var.number_of_computed_ingress_with_cidr_blocks",
									],
								},
								"expressions": {
									"cidr_blocks": {
										"references": [
											"var.computed_ingress_with_cidr_blocks",
											"count.index",
											"var.ingress_cidr_blocks",
										],
									},
									"description": {
										"references": [
											"var.computed_ingress_with_cidr_blocks",
											"count.index",
										],
									},
									"from_port": {
										"references": [
											"var.computed_ingress_with_cidr_blocks",
											"count.index",
											"var.rules",
											"var.computed_ingress_with_cidr_blocks",
											"count.index",
										],
									},
									"prefix_list_ids": {
										"references": [
											"var.ingress_prefix_list_ids",
										],
									},
									"protocol": {
										"references": [
											"var.computed_ingress_with_cidr_blocks",
											"count.index",
											"var.rules",
											"var.computed_ingress_with_cidr_blocks",
											"count.index",
										],
									},
									"security_group_id": {
										"references": [
											"local.this_sg_id",
										],
									},
									"to_port": {
										"references": [
											"var.computed_ingress_with_cidr_blocks",
											"count.index",
											"var.rules",
											"var.computed_ingress_with_cidr_blocks",
											"count.index",
										],
									},
									"type": {
										"constant_value": "ingress",
									},
								},
								"mode":                "managed",
								"name":                "computed_ingress_with_cidr_blocks",
								"provider_config_key": "security_group:aws",
								"schema_version":      2,
								"type":                "aws_security_group_rule",
							},
							{
								"address": "aws_security_group_rule.computed_ingress_with_ipv6_cidr_blocks",
								"count_expression": {
									"references": [
										"var.create",
										"var.number_of_computed_ingress_with_ipv6_cidr_blocks",
									],
								},
								"expressions": {
									"description": {
										"references": [
											"var.computed_ingress_with_ipv6_cidr_blocks",
											"count.index",
										],
									},
									"from_port": {
										"references": [
											"var.computed_ingress_with_ipv6_cidr_blocks",
											"count.index",
											"var.rules",
											"var.computed_ingress_with_ipv6_cidr_blocks",
											"count.index",
										],
									},
									"ipv6_cidr_blocks": {
										"references": [
											"var.computed_ingress_with_ipv6_cidr_blocks",
											"count.index",
											"var.ingress_ipv6_cidr_blocks",
										],
									},
									"prefix_list_ids": {
										"references": [
											"var.ingress_prefix_list_ids",
										],
									},
									"protocol": {
										"references": [
											"var.computed_ingress_with_ipv6_cidr_blocks",
											"count.index",
											"var.rules",
											"var.computed_ingress_with_ipv6_cidr_blocks",
											"count.index",
										],
									},
									"security_group_id": {
										"references": [
											"local.this_sg_id",
										],
									},
									"to_port": {
										"references": [
											"var.computed_ingress_with_ipv6_cidr_blocks",
											"count.index",
											"var.rules",
											"var.computed_ingress_with_ipv6_cidr_blocks",
											"count.index",
										],
									},
									"type": {
										"constant_value": "ingress",
									},
								},
								"mode":                "managed",
								"name":                "computed_ingress_with_ipv6_cidr_blocks",
								"provider_config_key": "security_group:aws",
								"schema_version":      2,
								"type":                "aws_security_group_rule",
							},
							{
								"address": "aws_security_group_rule.computed_ingress_with_self",
								"count_expression": {
									"references": [
										"var.create",
										"var.number_of_computed_ingress_with_self",
									],
								},
								"expressions": {
									"description": {
										"references": [
											"var.computed_ingress_with_self",
											"count.index",
										],
									},
									"from_port": {
										"references": [
											"var.computed_ingress_with_self",
											"count.index",
											"var.rules",
											"var.computed_ingress_with_self",
											"count.index",
										],
									},
									"prefix_list_ids": {
										"references": [
											"var.ingress_prefix_list_ids",
										],
									},
									"protocol": {
										"references": [
											"var.computed_ingress_with_self",
											"count.index",
											"var.rules",
											"var.computed_ingress_with_self",
											"count.index",
										],
									},
									"security_group_id": {
										"references": [
											"local.this_sg_id",
										],
									},
									"self": {
										"references": [
											"var.computed_ingress_with_self",
											"count.index",
										],
									},
									"to_port": {
										"references": [
											"var.computed_ingress_with_self",
											"count.index",
											"var.rules",
											"var.computed_ingress_with_self",
											"count.index",
										],
									},
									"type": {
										"constant_value": "ingress",
									},
								},
								"mode":                "managed",
								"name":                "computed_ingress_with_self",
								"provider_config_key": "security_group:aws",
								"schema_version":      2,
								"type":                "aws_security_group_rule",
							},
							{
								"address": "aws_security_group_rule.computed_ingress_with_source_security_group_id",
								"count_expression": {
									"references": [
										"var.create",
										"var.number_of_computed_ingress_with_source_security_group_id",
									],
								},
								"expressions": {
									"description": {
										"references": [
											"var.computed_ingress_with_source_security_group_id",
											"count.index",
										],
									},
									"from_port": {
										"references": [
											"var.computed_ingress_with_source_security_group_id",
											"count.index",
											"var.rules",
											"var.computed_ingress_with_source_security_group_id",
											"count.index",
										],
									},
									"prefix_list_ids": {
										"references": [
											"var.ingress_prefix_list_ids",
										],
									},
									"protocol": {
										"references": [
											"var.computed_ingress_with_source_security_group_id",
											"count.index",
											"var.rules",
											"var.computed_ingress_with_source_security_group_id",
											"count.index",
										],
									},
									"security_group_id": {
										"references": [
											"local.this_sg_id",
										],
									},
									"source_security_group_id": {
										"references": [
											"var.computed_ingress_with_source_security_group_id",
											"count.index",
										],
									},
									"to_port": {
										"references": [
											"var.computed_ingress_with_source_security_group_id",
											"count.index",
											"var.rules",
											"var.computed_ingress_with_source_security_group_id",
											"count.index",
										],
									},
									"type": {
										"constant_value": "ingress",
									},
								},
								"mode":                "managed",
								"name":                "computed_ingress_with_source_security_group_id",
								"provider_config_key": "security_group:aws",
								"schema_version":      2,
								"type":                "aws_security_group_rule",
							},
							{
								"address": "aws_security_group_rule.egress_rules",
								"count_expression": {
									"references": [
										"var.create",
										"var.egress_rules",
									],
								},
								"expressions": {
									"cidr_blocks": {
										"references": [
											"var.egress_cidr_blocks",
										],
									},
									"description": {
										"references": [
											"var.rules",
											"var.egress_rules",
											"count.index",
										],
									},
									"from_port": {
										"references": [
											"var.rules",
											"var.egress_rules",
											"count.index",
										],
									},
									"ipv6_cidr_blocks": {
										"references": [
											"var.egress_ipv6_cidr_blocks",
										],
									},
									"prefix_list_ids": {
										"references": [
											"var.egress_prefix_list_ids",
										],
									},
									"protocol": {
										"references": [
											"var.rules",
											"var.egress_rules",
											"count.index",
										],
									},
									"security_group_id": {
										"references": [
											"local.this_sg_id",
										],
									},
									"to_port": {
										"references": [
											"var.rules",
											"var.egress_rules",
											"count.index",
										],
									},
									"type": {
										"constant_value": "egress",
									},
								},
								"mode":                "managed",
								"name":                "egress_rules",
								"provider_config_key": "security_group:aws",
								"schema_version":      2,
								"type":                "aws_security_group_rule",
							},
							{
								"address": "aws_security_group_rule.egress_with_cidr_blocks",
								"count_expression": {
									"references": [
										"var.create",
										"var.egress_with_cidr_blocks",
									],
								},
								"expressions": {
									"cidr_blocks": {
										"references": [
											"var.egress_with_cidr_blocks",
											"count.index",
											"var.egress_cidr_blocks",
										],
									},
									"description": {
										"references": [
											"var.egress_with_cidr_blocks",
											"count.index",
										],
									},
									"from_port": {
										"references": [
											"var.egress_with_cidr_blocks",
											"count.index",
											"var.rules",
											"var.egress_with_cidr_blocks",
											"count.index",
										],
									},
									"prefix_list_ids": {
										"references": [
											"var.egress_prefix_list_ids",
										],
									},
									"protocol": {
										"references": [
											"var.egress_with_cidr_blocks",
											"count.index",
											"var.rules",
											"var.egress_with_cidr_blocks",
											"count.index",
										],
									},
									"security_group_id": {
										"references": [
											"local.this_sg_id",
										],
									},
									"to_port": {
										"references": [
											"var.egress_with_cidr_blocks",
											"count.index",
											"var.rules",
											"var.egress_with_cidr_blocks",
											"count.index",
										],
									},
									"type": {
										"constant_value": "egress",
									},
								},
								"mode":                "managed",
								"name":                "egress_with_cidr_blocks",
								"provider_config_key": "security_group:aws",
								"schema_version":      2,
								"type":                "aws_security_group_rule",
							},
							{
								"address": "aws_security_group_rule.egress_with_ipv6_cidr_blocks",
								"count_expression": {
									"references": [
										"var.create",
										"var.egress_with_ipv6_cidr_blocks",
									],
								},
								"expressions": {
									"description": {
										"references": [
											"var.egress_with_ipv6_cidr_blocks",
											"count.index",
										],
									},
									"from_port": {
										"references": [
											"var.egress_with_ipv6_cidr_blocks",
											"count.index",
											"var.rules",
											"var.egress_with_ipv6_cidr_blocks",
											"count.index",
										],
									},
									"ipv6_cidr_blocks": {
										"references": [
											"var.egress_with_ipv6_cidr_blocks",
											"count.index",
											"var.egress_ipv6_cidr_blocks",
										],
									},
									"prefix_list_ids": {
										"references": [
											"var.egress_prefix_list_ids",
										],
									},
									"protocol": {
										"references": [
											"var.egress_with_ipv6_cidr_blocks",
											"count.index",
											"var.rules",
											"var.egress_with_ipv6_cidr_blocks",
											"count.index",
										],
									},
									"security_group_id": {
										"references": [
											"local.this_sg_id",
										],
									},
									"to_port": {
										"references": [
											"var.egress_with_ipv6_cidr_blocks",
											"count.index",
											"var.rules",
											"var.egress_with_ipv6_cidr_blocks",
											"count.index",
										],
									},
									"type": {
										"constant_value": "egress",
									},
								},
								"mode":                "managed",
								"name":                "egress_with_ipv6_cidr_blocks",
								"provider_config_key": "security_group:aws",
								"schema_version":      2,
								"type":                "aws_security_group_rule",
							},
							{
								"address": "aws_security_group_rule.egress_with_self",
								"count_expression": {
									"references": [
										"var.create",
										"var.egress_with_self",
									],
								},
								"expressions": {
									"description": {
										"references": [
											"var.egress_with_self",
											"count.index",
										],
									},
									"from_port": {
										"references": [
											"var.egress_with_self",
											"count.index",
											"var.rules",
											"var.egress_with_self",
											"count.index",
										],
									},
									"prefix_list_ids": {
										"references": [
											"var.egress_prefix_list_ids",
										],
									},
									"protocol": {
										"references": [
											"var.egress_with_self",
											"count.index",
											"var.rules",
											"var.egress_with_self",
											"count.index",
										],
									},
									"security_group_id": {
										"references": [
											"local.this_sg_id",
										],
									},
									"self": {
										"references": [
											"var.egress_with_self",
											"count.index",
										],
									},
									"to_port": {
										"references": [
											"var.egress_with_self",
											"count.index",
											"var.rules",
											"var.egress_with_self",
											"count.index",
										],
									},
									"type": {
										"constant_value": "egress",
									},
								},
								"mode":                "managed",
								"name":                "egress_with_self",
								"provider_config_key": "security_group:aws",
								"schema_version":      2,
								"type":                "aws_security_group_rule",
							},
							{
								"address": "aws_security_group_rule.egress_with_source_security_group_id",
								"count_expression": {
									"references": [
										"var.create",
										"var.egress_with_source_security_group_id",
									],
								},
								"expressions": {
									"description": {
										"references": [
											"var.egress_with_source_security_group_id",
											"count.index",
										],
									},
									"from_port": {
										"references": [
											"var.egress_with_source_security_group_id",
											"count.index",
											"var.rules",
											"var.egress_with_source_security_group_id",
											"count.index",
										],
									},
									"prefix_list_ids": {
										"references": [
											"var.egress_prefix_list_ids",
										],
									},
									"protocol": {
										"references": [
											"var.egress_with_source_security_group_id",
											"count.index",
											"var.rules",
											"var.egress_with_source_security_group_id",
											"count.index",
										],
									},
									"security_group_id": {
										"references": [
											"local.this_sg_id",
										],
									},
									"source_security_group_id": {
										"references": [
											"var.egress_with_source_security_group_id",
											"count.index",
										],
									},
									"to_port": {
										"references": [
											"var.egress_with_source_security_group_id",
											"count.index",
											"var.rules",
											"var.egress_with_source_security_group_id",
											"count.index",
										],
									},
									"type": {
										"constant_value": "egress",
									},
								},
								"mode":                "managed",
								"name":                "egress_with_source_security_group_id",
								"provider_config_key": "security_group:aws",
								"schema_version":      2,
								"type":                "aws_security_group_rule",
							},
							{
								"address": "aws_security_group_rule.ingress_rules",
								"count_expression": {
									"references": [
										"var.create",
										"var.ingress_rules",
									],
								},
								"expressions": {
									"cidr_blocks": {
										"references": [
											"var.ingress_cidr_blocks",
										],
									},
									"description": {
										"references": [
											"var.rules",
											"var.ingress_rules",
											"count.index",
										],
									},
									"from_port": {
										"references": [
											"var.rules",
											"var.ingress_rules",
											"count.index",
										],
									},
									"ipv6_cidr_blocks": {
										"references": [
											"var.ingress_ipv6_cidr_blocks",
										],
									},
									"prefix_list_ids": {
										"references": [
											"var.ingress_prefix_list_ids",
										],
									},
									"protocol": {
										"references": [
											"var.rules",
											"var.ingress_rules",
											"count.index",
										],
									},
									"security_group_id": {
										"references": [
											"local.this_sg_id",
										],
									},
									"to_port": {
										"references": [
											"var.rules",
											"var.ingress_rules",
											"count.index",
										],
									},
									"type": {
										"constant_value": "ingress",
									},
								},
								"mode":                "managed",
								"name":                "ingress_rules",
								"provider_config_key": "security_group:aws",
								"schema_version":      2,
								"type":                "aws_security_group_rule",
							},
							{
								"address": "aws_security_group_rule.ingress_with_cidr_blocks",
								"count_expression": {
									"references": [
										"var.create",
										"var.ingress_with_cidr_blocks",
									],
								},
								"expressions": {
									"cidr_blocks": {
										"references": [
											"var.ingress_with_cidr_blocks",
											"count.index",
											"var.ingress_cidr_blocks",
										],
									},
									"description": {
										"references": [
											"var.ingress_with_cidr_blocks",
											"count.index",
										],
									},
									"from_port": {
										"references": [
											"var.ingress_with_cidr_blocks",
											"count.index",
											"var.rules",
											"var.ingress_with_cidr_blocks",
											"count.index",
										],
									},
									"prefix_list_ids": {
										"references": [
											"var.ingress_prefix_list_ids",
										],
									},
									"protocol": {
										"references": [
											"var.ingress_with_cidr_blocks",
											"count.index",
											"var.rules",
											"var.ingress_with_cidr_blocks",
											"count.index",
										],
									},
									"security_group_id": {
										"references": [
											"local.this_sg_id",
										],
									},
									"to_port": {
										"references": [
											"var.ingress_with_cidr_blocks",
											"count.index",
											"var.rules",
											"var.ingress_with_cidr_blocks",
											"count.index",
										],
									},
									"type": {
										"constant_value": "ingress",
									},
								},
								"mode":                "managed",
								"name":                "ingress_with_cidr_blocks",
								"provider_config_key": "security_group:aws",
								"schema_version":      2,
								"type":                "aws_security_group_rule",
							},
							{
								"address": "aws_security_group_rule.ingress_with_ipv6_cidr_blocks",
								"count_expression": {
									"references": [
										"var.create",
										"var.ingress_with_ipv6_cidr_blocks",
									],
								},
								"expressions": {
									"description": {
										"references": [
											"var.ingress_with_ipv6_cidr_blocks",
											"count.index",
										],
									},
									"from_port": {
										"references": [
											"var.ingress_with_ipv6_cidr_blocks",
											"count.index",
											"var.rules",
											"var.ingress_with_ipv6_cidr_blocks",
											"count.index",
										],
									},
									"ipv6_cidr_blocks": {
										"references": [
											"var.ingress_with_ipv6_cidr_blocks",
											"count.index",
											"var.ingress_ipv6_cidr_blocks",
										],
									},
									"prefix_list_ids": {
										"references": [
											"var.ingress_prefix_list_ids",
										],
									},
									"protocol": {
										"references": [
											"var.ingress_with_ipv6_cidr_blocks",
											"count.index",
											"var.rules",
											"var.ingress_with_ipv6_cidr_blocks",
											"count.index",
										],
									},
									"security_group_id": {
										"references": [
											"local.this_sg_id",
										],
									},
									"to_port": {
										"references": [
											"var.ingress_with_ipv6_cidr_blocks",
											"count.index",
											"var.rules",
											"var.ingress_with_ipv6_cidr_blocks",
											"count.index",
										],
									},
									"type": {
										"constant_value": "ingress",
									},
								},
								"mode":                "managed",
								"name":                "ingress_with_ipv6_cidr_blocks",
								"provider_config_key": "security_group:aws",
								"schema_version":      2,
								"type":                "aws_security_group_rule",
							},
							{
								"address": "aws_security_group_rule.ingress_with_self",
								"count_expression": {
									"references": [
										"var.create",
										"var.ingress_with_self",
									],
								},
								"expressions": {
									"description": {
										"references": [
											"var.ingress_with_self",
											"count.index",
										],
									},
									"from_port": {
										"references": [
											"var.ingress_with_self",
											"count.index",
											"var.rules",
											"var.ingress_with_self",
											"count.index",
										],
									},
									"prefix_list_ids": {
										"references": [
											"var.ingress_prefix_list_ids",
										],
									},
									"protocol": {
										"references": [
											"var.ingress_with_self",
											"count.index",
											"var.rules",
											"var.ingress_with_self",
											"count.index",
										],
									},
									"security_group_id": {
										"references": [
											"local.this_sg_id",
										],
									},
									"self": {
										"references": [
											"var.ingress_with_self",
											"count.index",
										],
									},
									"to_port": {
										"references": [
											"var.ingress_with_self",
											"count.index",
											"var.rules",
											"var.ingress_with_self",
											"count.index",
										],
									},
									"type": {
										"constant_value": "ingress",
									},
								},
								"mode":                "managed",
								"name":                "ingress_with_self",
								"provider_config_key": "security_group:aws",
								"schema_version":      2,
								"type":                "aws_security_group_rule",
							},
							{
								"address": "aws_security_group_rule.ingress_with_source_security_group_id",
								"count_expression": {
									"references": [
										"var.create",
										"var.ingress_with_source_security_group_id",
									],
								},
								"expressions": {
									"description": {
										"references": [
											"var.ingress_with_source_security_group_id",
											"count.index",
										],
									},
									"from_port": {
										"references": [
											"var.ingress_with_source_security_group_id",
											"count.index",
											"var.rules",
											"var.ingress_with_source_security_group_id",
											"count.index",
										],
									},
									"prefix_list_ids": {
										"references": [
											"var.ingress_prefix_list_ids",
										],
									},
									"protocol": {
										"references": [
											"var.ingress_with_source_security_group_id",
											"count.index",
											"var.rules",
											"var.ingress_with_source_security_group_id",
											"count.index",
										],
									},
									"security_group_id": {
										"references": [
											"local.this_sg_id",
										],
									},
									"source_security_group_id": {
										"references": [
											"var.ingress_with_source_security_group_id",
											"count.index",
										],
									},
									"to_port": {
										"references": [
											"var.ingress_with_source_security_group_id",
											"count.index",
											"var.rules",
											"var.ingress_with_source_security_group_id",
											"count.index",
										],
									},
									"type": {
										"constant_value": "ingress",
									},
								},
								"mode":                "managed",
								"name":                "ingress_with_source_security_group_id",
								"provider_config_key": "security_group:aws",
								"schema_version":      2,
								"type":                "aws_security_group_rule",
							},
						],
						"variables": {
							"auto_groups": {
								"default": {
									"activemq": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"activemq-5671-tcp",
											"activemq-8883-tcp",
											"activemq-61614-tcp",
											"activemq-61617-tcp",
											"activemq-61619-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"alertmanager": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"alertmanager-9093-tcp",
											"alertmanager-9094-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"carbon-relay-ng": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"carbon-line-in-tcp",
											"carbon-line-in-udp",
											"carbon-pickle-tcp",
											"carbon-pickle-udp",
											"carbon-gui-udp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"cassandra": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"cassandra-clients-tcp",
											"cassandra-thrift-clients-tcp",
											"cassandra-jmx-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"consul": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"consul-tcp",
											"consul-grpc-tcp",
											"consul-webui-http-tcp",
											"consul-webui-https-tcp",
											"consul-dns-tcp",
											"consul-dns-udp",
											"consul-serf-lan-tcp",
											"consul-serf-lan-udp",
											"consul-serf-wan-tcp",
											"consul-serf-wan-udp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"docker-swarm": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"docker-swarm-mngmt-tcp",
											"docker-swarm-node-tcp",
											"docker-swarm-node-udp",
											"docker-swarm-overlay-udp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"elasticsearch": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"elasticsearch-rest-tcp",
											"elasticsearch-java-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"etcd": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"etcd-client-tcp",
											"etcd-peer-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"grafana": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"grafana-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"graphite-statsd": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"graphite-webui",
											"graphite-2003-tcp",
											"graphite-2004-tcp",
											"graphite-2023-tcp",
											"graphite-2024-tcp",
											"graphite-8080-tcp",
											"graphite-8125-tcp",
											"graphite-8125-udp",
											"graphite-8126-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"http-80": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"http-80-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"http-8080": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"http-8080-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"https-443": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"https-443-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"https-8443": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"https-8443-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"ipsec-4500": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"ipsec-4500-udp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"ipsec-500": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"ipsec-500-udp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"kafka": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"kafka-broker-tcp",
											"kafka-broker-tls-tcp",
											"kafka-jmx-exporter-tcp",
											"kafka-node-exporter-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"kibana": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"kibana-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"kubernetes-api": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"kubernetes-api-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"ldap": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"ldap-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"ldaps": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"ldaps-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"logstash": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"logstash-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"memcached": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"memcached-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"minio": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"minio-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"mongodb": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"mongodb-27017-tcp",
											"mongodb-27018-tcp",
											"mongodb-27019-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"mssql": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"mssql-tcp",
											"mssql-udp",
											"mssql-analytics-tcp",
											"mssql-broker-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"mysql": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"mysql-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"nfs": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"nfs-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"nomad": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"nomad-http-tcp",
											"nomad-rpc-tcp",
											"nomad-serf-tcp",
											"nomad-serf-udp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"ntp": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"ntp-udp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"openvpn": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"openvpn-udp",
											"openvpn-tcp",
											"openvpn-https-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"oracle-db": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"oracle-db-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"postgresql": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"postgresql-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"prometheus": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"prometheus-http-tcp",
											"prometheus-pushgateway-http-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"puppet": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"puppet-tcp",
											"puppetdb-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"rabbitmq": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"rabbitmq-4369-tcp",
											"rabbitmq-5671-tcp",
											"rabbitmq-5672-tcp",
											"rabbitmq-15672-tcp",
											"rabbitmq-25672-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"rdp": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"rdp-tcp",
											"rdp-udp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"redis": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"redis-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"redshift": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"redshift-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"smtp": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"smtp-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"smtp-submission": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"smtp-submission-587-tcp",
											"smtp-submission-2587-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"smtps": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"smtps-465-tcp",
											"smtps-2465-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"solr": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"solr-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"splunk": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"splunk-indexer-tcp",
											"splunk-clients-tcp",
											"splunk-splunkd-tcp",
											"splunk-hec-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"squid": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"squid-proxy-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"ssh": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"ssh-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"storm": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"storm-nimbus-tcp",
											"storm-ui-tcp",
											"storm-supervisor-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"web": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"http-80-tcp",
											"http-8080-tcp",
											"https-443-tcp",
											"web-jmx-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"winrm": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"winrm-http-tcp",
											"winrm-https-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"zipkin": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"zipkin-admin-tcp",
											"zipkin-admin-query-tcp",
											"zipkin-admin-web-tcp",
											"zipkin-query-tcp",
											"zipkin-web-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
									"zookeeper": {
										"egress_rules": [
											"all-all",
										],
										"ingress_rules": [
											"zookeeper-2181-tcp",
											"zookeeper-2888-tcp",
											"zookeeper-3888-tcp",
											"zookeeper-jmx-tcp",
										],
										"ingress_with_self": [
											"all-all",
										],
									},
								},
								"description": "Map of groups of security group rules to use to generate modules (see update_groups.sh)",
							},
							"computed_egress_rules": {
								"default":     [],
								"description": "List of computed egress rules to create by name",
							},
							"computed_egress_with_cidr_blocks": {
								"default":     [],
								"description": "List of computed egress rules to create where 'cidr_blocks' is used",
							},
							"computed_egress_with_ipv6_cidr_blocks": {
								"default":     [],
								"description": "List of computed egress rules to create where 'ipv6_cidr_blocks' is used",
							},
							"computed_egress_with_self": {
								"default":     [],
								"description": "List of computed egress rules to create where 'self' is defined",
							},
							"computed_egress_with_source_security_group_id": {
								"default":     [],
								"description": "List of computed egress rules to create where 'source_security_group_id' is used",
							},
							"computed_ingress_rules": {
								"default":     [],
								"description": "List of computed ingress rules to create by name",
							},
							"computed_ingress_with_cidr_blocks": {
								"default":     [],
								"description": "List of computed ingress rules to create where 'cidr_blocks' is used",
							},
							"computed_ingress_with_ipv6_cidr_blocks": {
								"default":     [],
								"description": "List of computed ingress rules to create where 'ipv6_cidr_blocks' is used",
							},
							"computed_ingress_with_self": {
								"default":     [],
								"description": "List of computed ingress rules to create where 'self' is defined",
							},
							"computed_ingress_with_source_security_group_id": {
								"default":     [],
								"description": "List of computed ingress rules to create where 'source_security_group_id' is used",
							},
							"create": {
								"default":     true,
								"description": "Whether to create security group and all rules",
							},
							"create_sg": {
								"default":     true,
								"description": "Whether to create security group",
							},
							"create_timeout": {
								"default":     "10m",
								"description": "Time to wait for a security group to be created",
							},
							"delete_timeout": {
								"default":     "15m",
								"description": "Time to wait for a security group to be deleted",
							},
							"description": {
								"default":     "Security Group managed by Terraform",
								"description": "Description of security group",
							},
							"egress_cidr_blocks": {
								"default": [
									"0.0.0.0/0",
								],
								"description": "List of IPv4 CIDR ranges to use on all egress rules",
							},
							"egress_ipv6_cidr_blocks": {
								"default": [
									"::/0",
								],
								"description": "List of IPv6 CIDR ranges to use on all egress rules",
							},
							"egress_prefix_list_ids": {
								"default":     [],
								"description": "List of prefix list IDs (for allowing access to VPC endpoints) to use on all egress rules",
							},
							"egress_rules": {
								"default":     [],
								"description": "List of egress rules to create by name",
							},
							"egress_with_cidr_blocks": {
								"default":     [],
								"description": "List of egress rules to create where 'cidr_blocks' is used",
							},
							"egress_with_ipv6_cidr_blocks": {
								"default":     [],
								"description": "List of egress rules to create where 'ipv6_cidr_blocks' is used",
							},
							"egress_with_self": {
								"default":     [],
								"description": "List of egress rules to create where 'self' is defined",
							},
							"egress_with_source_security_group_id": {
								"default":     [],
								"description": "List of egress rules to create where 'source_security_group_id' is used",
							},
							"ingress_cidr_blocks": {
								"default":     [],
								"description": "List of IPv4 CIDR ranges to use on all ingress rules",
							},
							"ingress_ipv6_cidr_blocks": {
								"default":     [],
								"description": "List of IPv6 CIDR ranges to use on all ingress rules",
							},
							"ingress_prefix_list_ids": {
								"default":     [],
								"description": "List of prefix list IDs (for allowing access to VPC endpoints) to use on all ingress rules",
							},
							"ingress_rules": {
								"default":     [],
								"description": "List of ingress rules to create by name",
							},
							"ingress_with_cidr_blocks": {
								"default":     [],
								"description": "List of ingress rules to create where 'cidr_blocks' is used",
							},
							"ingress_with_ipv6_cidr_blocks": {
								"default":     [],
								"description": "List of ingress rules to create where 'ipv6_cidr_blocks' is used",
							},
							"ingress_with_self": {
								"default":     [],
								"description": "List of ingress rules to create where 'self' is defined",
							},
							"ingress_with_source_security_group_id": {
								"default":     [],
								"description": "List of ingress rules to create where 'source_security_group_id' is used",
							},
							"name": {
								"description": "Name of security group - not required if create_sg is false",
							},
							"number_of_computed_egress_rules": {
								"default":     0,
								"description": "Number of computed egress rules to create by name",
							},
							"number_of_computed_egress_with_cidr_blocks": {
								"default":     0,
								"description": "Number of computed egress rules to create where 'cidr_blocks' is used",
							},
							"number_of_computed_egress_with_ipv6_cidr_blocks": {
								"default":     0,
								"description": "Number of computed egress rules to create where 'ipv6_cidr_blocks' is used",
							},
							"number_of_computed_egress_with_self": {
								"default":     0,
								"description": "Number of computed egress rules to create where 'self' is defined",
							},
							"number_of_computed_egress_with_source_security_group_id": {
								"default":     0,
								"description": "Number of computed egress rules to create where 'source_security_group_id' is used",
							},
							"number_of_computed_ingress_rules": {
								"default":     0,
								"description": "Number of computed ingress rules to create by name",
							},
							"number_of_computed_ingress_with_cidr_blocks": {
								"default":     0,
								"description": "Number of computed ingress rules to create where 'cidr_blocks' is used",
							},
							"number_of_computed_ingress_with_ipv6_cidr_blocks": {
								"default":     0,
								"description": "Number of computed ingress rules to create where 'ipv6_cidr_blocks' is used",
							},
							"number_of_computed_ingress_with_self": {
								"default":     0,
								"description": "Number of computed ingress rules to create where 'self' is defined",
							},
							"number_of_computed_ingress_with_source_security_group_id": {
								"default":     0,
								"description": "Number of computed ingress rules to create where 'source_security_group_id' is used",
							},
							"revoke_rules_on_delete": {
								"default":     false,
								"description": "Instruct Terraform to revoke all of the Security Groups attached ingress and egress rules before deleting the rule itself. Enable for EMR.",
							},
							"rules": {
								"default": {
									"_": [
										"",
										"",
										"",
									],
									"activemq-5671-tcp": [
										"5671",
										"5671",
										"tcp",
										"ActiveMQ AMQP",
									],
									"activemq-61614-tcp": [
										"61614",
										"61614",
										"tcp",
										"ActiveMQ STOMP",
									],
									"activemq-61617-tcp": [
										"61617",
										"61617",
										"tcp",
										"ActiveMQ OpenWire",
									],
									"activemq-61619-tcp": [
										"61619",
										"61619",
										"tcp",
										"ActiveMQ WebSocket",
									],
									"activemq-8883-tcp": [
										"8883",
										"8883",
										"tcp",
										"ActiveMQ MQTT",
									],
									"alertmanager-9093-tcp": [
										"9093",
										"9093",
										"tcp",
										"Alert Manager",
									],
									"alertmanager-9094-tcp": [
										"9094",
										"9094",
										"tcp",
										"Alert Manager Cluster",
									],
									"all-all": [
										"-1",
										"-1",
										"-1",
										"All protocols",
									],
									"all-icmp": [
										"-1",
										"-1",
										"icmp",
										"All IPV4 ICMP",
									],
									"all-ipv6-icmp": [
										"-1",
										"-1",
										"58",
										"All IPV6 ICMP",
									],
									"all-tcp": [
										"0",
										"65535",
										"tcp",
										"All TCP ports",
									],
									"all-udp": [
										"0",
										"65535",
										"udp",
										"All UDP ports",
									],
									"carbon-admin-tcp": [
										"2004",
										"2004",
										"tcp",
										"Carbon admin",
									],
									"carbon-gui-udp": [
										"8081",
										"8081",
										"tcp",
										"Carbon GUI",
									],
									"carbon-line-in-tcp": [
										"2003",
										"2003",
										"tcp",
										"Carbon line-in",
									],
									"carbon-line-in-udp": [
										"2003",
										"2003",
										"udp",
										"Carbon line-in",
									],
									"carbon-pickle-tcp": [
										"2013",
										"2013",
										"tcp",
										"Carbon pickle",
									],
									"carbon-pickle-udp": [
										"2013",
										"2013",
										"udp",
										"Carbon pickle",
									],
									"cassandra-clients-tcp": [
										"9042",
										"9042",
										"tcp",
										"Cassandra clients",
									],
									"cassandra-jmx-tcp": [
										"7199",
										"7199",
										"tcp",
										"JMX",
									],
									"cassandra-thrift-clients-tcp": [
										"9160",
										"9160",
										"tcp",
										"Cassandra Thrift clients",
									],
									"consul-dns-tcp": [
										"8600",
										"8600",
										"tcp",
										"Consul DNS",
									],
									"consul-dns-udp": [
										"8600",
										"8600",
										"udp",
										"Consul DNS",
									],
									"consul-grpc-tcp": [
										"8502",
										"8502",
										"tcp",
										"Consul gRPC",
									],
									"consul-serf-lan-tcp": [
										"8301",
										"8301",
										"tcp",
										"Serf LAN",
									],
									"consul-serf-lan-udp": [
										"8301",
										"8301",
										"udp",
										"Serf LAN",
									],
									"consul-serf-wan-tcp": [
										"8302",
										"8302",
										"tcp",
										"Serf WAN",
									],
									"consul-serf-wan-udp": [
										"8302",
										"8302",
										"udp",
										"Serf WAN",
									],
									"consul-tcp": [
										"8300",
										"8300",
										"tcp",
										"Consul server",
									],
									"consul-webui-http-tcp": [
										"8500",
										"8500",
										"tcp",
										"Consul web UI HTTP",
									],
									"consul-webui-https-tcp": [
										"8501",
										"8501",
										"tcp",
										"Consul web UI HTTPS",
									],
									"dns-tcp": [
										"53",
										"53",
										"tcp",
										"DNS",
									],
									"dns-udp": [
										"53",
										"53",
										"udp",
										"DNS",
									],
									"docker-swarm-mngmt-tcp": [
										"2377",
										"2377",
										"tcp",
										"Docker Swarm cluster management",
									],
									"docker-swarm-node-tcp": [
										"7946",
										"7946",
										"tcp",
										"Docker Swarm node",
									],
									"docker-swarm-node-udp": [
										"7946",
										"7946",
										"udp",
										"Docker Swarm node",
									],
									"docker-swarm-overlay-udp": [
										"4789",
										"4789",
										"udp",
										"Docker Swarm Overlay Network Traffic",
									],
									"elasticsearch-java-tcp": [
										"9300",
										"9300",
										"tcp",
										"Elasticsearch Java interface",
									],
									"elasticsearch-rest-tcp": [
										"9200",
										"9200",
										"tcp",
										"Elasticsearch REST interface",
									],
									"etcd-client-tcp": [
										"2379",
										"2379",
										"tcp",
										"Etcd Client",
									],
									"etcd-peer-tcp": [
										"2380",
										"2380",
										"tcp",
										"Etcd Peer",
									],
									"grafana-tcp": [
										"3000",
										"3000",
										"tcp",
										"Grafana Dashboard",
									],
									"graphite-2003-tcp": [
										"2003",
										"2003",
										"tcp",
										"Carbon receiver plain text",
									],
									"graphite-2004-tcp": [
										"2004",
										"2004",
										"tcp",
										"Carbon receiver pickle",
									],
									"graphite-2023-tcp": [
										"2023",
										"2023",
										"tcp",
										"Carbon aggregator plaintext",
									],
									"graphite-2024-tcp": [
										"2024",
										"2024",
										"tcp",
										"Carbon aggregator pickle",
									],
									"graphite-8080-tcp": [
										"8080",
										"8080",
										"tcp",
										"Graphite gunicorn port",
									],
									"graphite-8125-tcp": [
										"8125",
										"8125",
										"tcp",
										"Statsd TCP",
									],
									"graphite-8125-udp": [
										"8125",
										"8125",
										"udp",
										"Statsd UDP default",
									],
									"graphite-8126-tcp": [
										"8126",
										"8126",
										"tcp",
										"Statsd admin",
									],
									"graphite-webui": [
										"80",
										"80",
										"tcp",
										"Graphite admin interface",
									],
									"http-80-tcp": [
										"80",
										"80",
										"tcp",
										"HTTP",
									],
									"http-8080-tcp": [
										"8080",
										"8080",
										"tcp",
										"HTTP",
									],
									"https-443-tcp": [
										"443",
										"443",
										"tcp",
										"HTTPS",
									],
									"https-8443-tcp": [
										"8443",
										"8443",
										"tcp",
										"HTTPS",
									],
									"ipsec-4500-udp": [
										"4500",
										"4500",
										"udp",
										"IPSEC NAT-T",
									],
									"ipsec-500-udp": [
										"500",
										"500",
										"udp",
										"IPSEC ISAKMP",
									],
									"kafka-broker-tcp": [
										"9092",
										"9092",
										"tcp",
										"Kafka broker 0.8.2+",
									],
									"kafka-broker-tls-tcp": [
										"9094",
										"9094",
										"tcp",
										"Kafka TLS enabled broker 0.8.2+",
									],
									"kafka-jmx-exporter-tcp": [
										"11001",
										"11001",
										"tcp",
										"Kafka JMX Exporter",
									],
									"kafka-node-exporter-tcp": [
										"11002",
										"11002",
										"tcp",
										"Kafka Node Exporter",
									],
									"kibana-tcp": [
										"5601",
										"5601",
										"tcp",
										"Kibana Web Interface",
									],
									"kubernetes-api-tcp": [
										"6443",
										"6443",
										"tcp",
										"Kubernetes API Server",
									],
									"ldap-tcp": [
										"389",
										"389",
										"tcp",
										"LDAP",
									],
									"ldaps-tcp": [
										"636",
										"636",
										"tcp",
										"LDAPS",
									],
									"logstash-tcp": [
										"5044",
										"5044",
										"tcp",
										"Logstash",
									],
									"memcached-tcp": [
										"11211",
										"11211",
										"tcp",
										"Memcached",
									],
									"minio-tcp": [
										"9000",
										"9000",
										"tcp",
										"MinIO",
									],
									"mongodb-27017-tcp": [
										"27017",
										"27017",
										"tcp",
										"MongoDB",
									],
									"mongodb-27018-tcp": [
										"27018",
										"27018",
										"tcp",
										"MongoDB shard",
									],
									"mongodb-27019-tcp": [
										"27019",
										"27019",
										"tcp",
										"MongoDB config server",
									],
									"mssql-analytics-tcp": [
										"2383",
										"2383",
										"tcp",
										"MSSQL Analytics",
									],
									"mssql-broker-tcp": [
										"4022",
										"4022",
										"tcp",
										"MSSQL Broker",
									],
									"mssql-tcp": [
										"1433",
										"1433",
										"tcp",
										"MSSQL Server",
									],
									"mssql-udp": [
										"1434",
										"1434",
										"udp",
										"MSSQL Browser",
									],
									"mysql-tcp": [
										"3306",
										"3306",
										"tcp",
										"MySQL/Aurora",
									],
									"nfs-tcp": [
										"2049",
										"2049",
										"tcp",
										"NFS/EFS",
									],
									"nomad-http-tcp": [
										"4646",
										"4646",
										"tcp",
										"Nomad HTTP",
									],
									"nomad-rpc-tcp": [
										"4647",
										"4647",
										"tcp",
										"Nomad RPC",
									],
									"nomad-serf-tcp": [
										"4648",
										"4648",
										"tcp",
										"Serf",
									],
									"nomad-serf-udp": [
										"4648",
										"4648",
										"udp",
										"Serf",
									],
									"ntp-udp": [
										"123",
										"123",
										"udp",
										"NTP",
									],
									"octopus-tentacle-tcp": [
										"10933",
										"10933",
										"tcp",
										"Octopus Tentacle",
									],
									"openvpn-https-tcp": [
										"443",
										"443",
										"tcp",
										"OpenVPN",
									],
									"openvpn-tcp": [
										"943",
										"943",
										"tcp",
										"OpenVPN",
									],
									"openvpn-udp": [
										"1194",
										"1194",
										"udp",
										"OpenVPN",
									],
									"oracle-db-tcp": [
										"1521",
										"1521",
										"tcp",
										"Oracle",
									],
									"postgresql-tcp": [
										"5432",
										"5432",
										"tcp",
										"PostgreSQL",
									],
									"prometheus-http-tcp": [
										"9090",
										"9090",
										"tcp",
										"Prometheus",
									],
									"prometheus-pushgateway-http-tcp": [
										"9091",
										"9091",
										"tcp",
										"Prometheus Pushgateway",
									],
									"puppet-tcp": [
										"8140",
										"8140",
										"tcp",
										"Puppet",
									],
									"puppetdb-tcp": [
										"8081",
										"8081",
										"tcp",
										"PuppetDB",
									],
									"rabbitmq-15672-tcp": [
										"15672",
										"15672",
										"tcp",
										"RabbitMQ",
									],
									"rabbitmq-25672-tcp": [
										"25672",
										"25672",
										"tcp",
										"RabbitMQ",
									],
									"rabbitmq-4369-tcp": [
										"4369",
										"4369",
										"tcp",
										"RabbitMQ epmd",
									],
									"rabbitmq-5671-tcp": [
										"5671",
										"5671",
										"tcp",
										"RabbitMQ",
									],
									"rabbitmq-5672-tcp": [
										"5672",
										"5672",
										"tcp",
										"RabbitMQ",
									],
									"rdp-tcp": [
										"3389",
										"3389",
										"tcp",
										"Remote Desktop",
									],
									"rdp-udp": [
										"3389",
										"3389",
										"udp",
										"Remote Desktop",
									],
									"redis-tcp": [
										"6379",
										"6379",
										"tcp",
										"Redis",
									],
									"redshift-tcp": [
										"5439",
										"5439",
										"tcp",
										"Redshift",
									],
									"saltstack-tcp": [
										"4505",
										"4506",
										"tcp",
										"SaltStack",
									],
									"smtp-submission-2587-tcp": [
										"2587",
										"2587",
										"tcp",
										"SMTP Submission",
									],
									"smtp-submission-587-tcp": [
										"587",
										"587",
										"tcp",
										"SMTP Submission",
									],
									"smtp-tcp": [
										"25",
										"25",
										"tcp",
										"SMTP",
									],
									"smtps-2456-tcp": [
										"2465",
										"2465",
										"tcp",
										"SMTPS",
									],
									"smtps-465-tcp": [
										"465",
										"465",
										"tcp",
										"SMTPS",
									],
									"solr-tcp": [
										"8983",
										"8987",
										"tcp",
										"Solr",
									],
									"splunk-hec-tcp": [
										"8088",
										"8088",
										"tcp",
										"Splunk HEC",
									],
									"splunk-indexer-tcp": [
										"9997",
										"9997",
										"tcp",
										"Splunk indexer",
									],
									"splunk-splunkd-tcp": [
										"8089",
										"8089",
										"tcp",
										"Splunkd",
									],
									"splunk-web-tcp": [
										"8000",
										"8000",
										"tcp",
										"Splunk Web",
									],
									"squid-proxy-tcp": [
										"3128",
										"3128",
										"tcp",
										"Squid default proxy",
									],
									"ssh-tcp": [
										"22",
										"22",
										"tcp",
										"SSH",
									],
									"storm-nimbus-tcp": [
										"6627",
										"6627",
										"tcp",
										"Nimbus",
									],
									"storm-supervisor-tcp": [
										"6700",
										"6703",
										"tcp",
										"Supervisor",
									],
									"storm-ui-tcp": [
										"8080",
										"8080",
										"tcp",
										"Storm UI",
									],
									"web-jmx-tcp": [
										"1099",
										"1099",
										"tcp",
										"JMX",
									],
									"winrm-http-tcp": [
										"5985",
										"5985",
										"tcp",
										"WinRM HTTP",
									],
									"winrm-https-tcp": [
										"5986",
										"5986",
										"tcp",
										"WinRM HTTPS",
									],
									"zipkin-admin-query-tcp": [
										"9901",
										"9901",
										"tcp",
										"Zipkin Admin port query",
									],
									"zipkin-admin-tcp": [
										"9990",
										"9990",
										"tcp",
										"Zipkin Admin port collector",
									],
									"zipkin-admin-web-tcp": [
										"9991",
										"9991",
										"tcp",
										"Zipkin Admin port web",
									],
									"zipkin-query-tcp": [
										"9411",
										"9411",
										"tcp",
										"Zipkin query port",
									],
									"zipkin-web-tcp": [
										"8080",
										"8080",
										"tcp",
										"Zipkin web port",
									],
									"zookeeper-2181-tcp": [
										"2181",
										"2181",
										"tcp",
										"Zookeeper",
									],
									"zookeeper-2888-tcp": [
										"2888",
										"2888",
										"tcp",
										"Zookeeper",
									],
									"zookeeper-3888-tcp": [
										"3888",
										"3888",
										"tcp",
										"Zookeeper",
									],
									"zookeeper-jmx-tcp": [
										"7199",
										"7199",
										"tcp",
										"JMX",
									],
								},
								"description": "Map of known security group rules (define as 'name' = ['from port', 'to port', 'protocol', 'description'])",
							},
							"security_group_id": {
								"description": "ID of existing security group whose rules we will manage",
							},
							"tags": {
								"default":     {},
								"description": "A mapping of tags to assign to security group",
							},
							"use_name_prefix": {
								"default":     true,
								"description": "Whether to use name_prefix or fixed name. Should be true to able to update security group name after initial creation",
							},
							"vpc_id": {
								"description": "ID of the VPC where to create security group",
							},
						},
					},
					"source": "terraform-aws-modules/security-group/aws",
				},
			},
			"outputs": {
				"instance_public_ip": {
					"description": "Public IP address of the EC2 instance",
					"expression": {
						"references": [
							"aws_instance.demo_server.public_ip",
							"aws_instance.demo_server",
						],
					},
				},
			},
			"resources": [
				{
					"address": "aws_instance.demo_server",
					"expressions": {
						"ami": {
							"constant_value": "ami-02e136e904f3da870",
						},
						"availability_zone": {
							"references": [
								"data.aws_availability_zones.available.names[0]",
								"data.aws_availability_zones.available.names",
								"data.aws_availability_zones.available",
							],
						},
						"instance_type": {
							"constant_value": "t2.micro",
						},
						"security_groups": {
							"references": [
								"module.security_group.security_group_id",
								"module.security_group",
							],
						},
						"subnet_id": {
							"references": [
								"aws_subnet.internal.id",
								"aws_subnet.internal",
							],
						},
						"tags": {
							"constant_value": {
								"Owner":   "Demo",
								"Purpose": "Lab",
							},
						},
					},
					"mode":                "managed",
					"name":                "demo_server",
					"provider_config_key": "aws",
					"schema_version":      1,
					"type":                "aws_instance",
				},
				{
					"address": "aws_subnet.external",
					"expressions": {
						"availability_zone": {
							"references": [
								"data.aws_availability_zones.available.names[1]",
								"data.aws_availability_zones.available.names",
								"data.aws_availability_zones.available",
							],
						},
						"cidr_block": {
							"constant_value": "10.0.2.0/24",
						},
						"tags": {
							"constant_value": {
								"Owner":   "Demo",
								"Purpose": "Lab",
							},
						},
						"vpc_id": {
							"references": [
								"aws_vpc.demo.id",
								"aws_vpc.demo",
							],
						},
					},
					"mode":                "managed",
					"name":                "external",
					"provider_config_key": "aws",
					"schema_version":      1,
					"type":                "aws_subnet",
				},
				{
					"address": "aws_subnet.internal",
					"expressions": {
						"availability_zone": {
							"references": [
								"data.aws_availability_zones.available.names[0]",
								"data.aws_availability_zones.available.names",
								"data.aws_availability_zones.available",
							],
						},
						"cidr_block": {
							"constant_value": "10.0.1.0/24",
						},
						"tags": {
							"constant_value": {
								"Owner":   "Demo",
								"Purpose": "Lab",
							},
						},
						"vpc_id": {
							"references": [
								"aws_vpc.demo.id",
								"aws_vpc.demo",
							],
						},
					},
					"mode":                "managed",
					"name":                "internal",
					"provider_config_key": "aws",
					"schema_version":      1,
					"type":                "aws_subnet",
				},
				{
					"address": "aws_vpc.demo",
					"expressions": {
						"cidr_block": {
							"constant_value": "10.0.0.0/16",
						},
					},
					"mode":                "managed",
					"name":                "demo",
					"provider_config_key": "aws",
					"schema_version":      1,
					"type":                "aws_vpc",
				},
				{
					"address": "data.aws_availability_zones.available",
					"expressions": {
						"state": {
							"constant_value": "available",
						},
					},
					"mode":                "data",
					"name":                "available",
					"provider_config_key": "aws",
					"schema_version":      0,
					"type":                "aws_availability_zones",
				},
			],
		},
	},
	"format_version": "1.0",
	"output_changes": {
		"instance_public_ip": {
			"actions": [
				"create",
			],
			"after_sensitive":  false,
			"after_unknown":    true,
			"before":           null,
			"before_sensitive": false,
		},
	},
	"planned_values": {
		"outputs": {
			"instance_public_ip": {
				"sensitive": false,
			},
		},
		"root_module": {
			"child_modules": [
				{
					"address": "module.security_group",
					"resources": [
						{
							"address":        "module.security_group.aws_security_group.this_name_prefix[0]",
							"index":          0,
							"mode":           "managed",
							"name":           "this_name_prefix",
							"provider_name":  "registry.terraform.io/hashicorp/aws",
							"schema_version": 1,
							"sensitive_values": {
								"egress":   [],
								"ingress":  [],
								"tags":     {},
								"tags_all": {},
								"timeouts": {},
							},
							"type": "aws_security_group",
							"values": {
								"description":            "Security Group managed by Terraform",
								"name_prefix":            "my-sg-",
								"revoke_rules_on_delete": false,
								"tags": {
									"Name": "my-sg",
								},
								"tags_all": {
									"Name": "my-sg",
								},
								"timeouts": {
									"create": "10m",
									"delete": "15m",
								},
							},
						},
						{
							"address":        "module.security_group.aws_security_group_rule.egress_rules[0]",
							"index":          0,
							"mode":           "managed",
							"name":           "egress_rules",
							"provider_name":  "registry.terraform.io/hashicorp/aws",
							"schema_version": 2,
							"sensitive_values": {
								"cidr_blocks": [
									false,
								],
								"ipv6_cidr_blocks": [
									false,
								],
								"prefix_list_ids": [],
							},
							"type": "aws_security_group_rule",
							"values": {
								"cidr_blocks": [
									"0.0.0.0/0",
								],
								"description": "All protocols",
								"from_port":   -1,
								"ipv6_cidr_blocks": [
									"::/0",
								],
								"prefix_list_ids": [],
								"protocol":        "-1",
								"self":            false,
								"to_port":         -1,
								"type":            "egress",
							},
						},
						{
							"address":        "module.security_group.aws_security_group_rule.ingress_rules[0]",
							"index":          0,
							"mode":           "managed",
							"name":           "ingress_rules",
							"provider_name":  "registry.terraform.io/hashicorp/aws",
							"schema_version": 2,
							"sensitive_values": {
								"cidr_blocks": [
									false,
								],
								"ipv6_cidr_blocks": [],
								"prefix_list_ids":  [],
							},
							"type": "aws_security_group_rule",
							"values": {
								"cidr_blocks": [
									"0.0.0.0/0",
								],
								"description":      "HTTP",
								"from_port":        80,
								"ipv6_cidr_blocks": [],
								"prefix_list_ids":  [],
								"protocol":         "tcp",
								"self":             false,
								"to_port":          80,
								"type":             "ingress",
							},
						},
						{
							"address":        "module.security_group.aws_security_group_rule.ingress_rules[1]",
							"index":          1,
							"mode":           "managed",
							"name":           "ingress_rules",
							"provider_name":  "registry.terraform.io/hashicorp/aws",
							"schema_version": 2,
							"sensitive_values": {
								"cidr_blocks": [
									false,
								],
								"ipv6_cidr_blocks": [],
								"prefix_list_ids":  [],
							},
							"type": "aws_security_group_rule",
							"values": {
								"cidr_blocks": [
									"0.0.0.0/0",
								],
								"description":      "All IPV4 ICMP",
								"from_port":        -1,
								"ipv6_cidr_blocks": [],
								"prefix_list_ids":  [],
								"protocol":         "icmp",
								"self":             false,
								"to_port":          -1,
								"type":             "ingress",
							},
						},
					],
				},
			],
			"resources": [
				{
					"address":        "aws_instance.demo_server",
					"mode":           "managed",
					"name":           "demo_server",
					"provider_name":  "registry.terraform.io/hashicorp/aws",
					"schema_version": 1,
					"sensitive_values": {
						"capacity_reservation_specification": [],
						"credit_specification":               [],
						"ebs_block_device":                   [],
						"enclave_options":                    [],
						"ephemeral_block_device":             [],
						"ipv6_addresses":                     [],
						"launch_template":                    [],
						"metadata_options":                   [],
						"network_interface":                  [],
						"root_block_device":                  [],
						"secondary_private_ips":              [],
						"security_groups":                    [],
						"tags":                               {},
						"tags_all":                           {},
						"vpc_security_group_ids":             [],
					},
					"type": "aws_instance",
					"values": {
						"ami":                  "ami-02e136e904f3da870",
						"availability_zone":    "us-east-1a",
						"credit_specification": [],
						"get_password_data":    false,
						"hibernation":          null,
						"iam_instance_profile": null,
						"instance_type":        "t2.micro",
						"launch_template":      [],
						"source_dest_check":    true,
						"tags": {
							"Owner":   "Demo",
							"Purpose": "Lab",
						},
						"tags_all": {
							"Owner":   "Demo",
							"Purpose": "Lab",
						},
						"timeouts":    null,
						"volume_tags": null,
					},
				},
				{
					"address":        "aws_subnet.external",
					"mode":           "managed",
					"name":           "external",
					"provider_name":  "registry.terraform.io/hashicorp/aws",
					"schema_version": 1,
					"sensitive_values": {
						"tags":     {},
						"tags_all": {},
					},
					"type": "aws_subnet",
					"values": {
						"assign_ipv6_address_on_creation":                false,
						"availability_zone":                              "us-east-1b",
						"cidr_block":                                     "10.0.2.0/24",
						"customer_owned_ipv4_pool":                       null,
						"enable_dns64":                                   false,
						"enable_resource_name_dns_a_record_on_launch":    false,
						"enable_resource_name_dns_aaaa_record_on_launch": false,
						"ipv6_cidr_block":                                null,
						"ipv6_native":                                    false,
						"map_customer_owned_ip_on_launch":                null,
						"map_public_ip_on_launch":                        false,
						"outpost_arn":                                    null,
						"tags": {
							"Owner":   "Demo",
							"Purpose": "Lab",
						},
						"tags_all": {
							"Owner":   "Demo",
							"Purpose": "Lab",
						},
						"timeouts": null,
					},
				},
				{
					"address":        "aws_subnet.internal",
					"mode":           "managed",
					"name":           "internal",
					"provider_name":  "registry.terraform.io/hashicorp/aws",
					"schema_version": 1,
					"sensitive_values": {
						"tags":     {},
						"tags_all": {},
					},
					"type": "aws_subnet",
					"values": {
						"assign_ipv6_address_on_creation":                false,
						"availability_zone":                              "us-east-1a",
						"cidr_block":                                     "10.0.1.0/24",
						"customer_owned_ipv4_pool":                       null,
						"enable_dns64":                                   false,
						"enable_resource_name_dns_a_record_on_launch":    false,
						"enable_resource_name_dns_aaaa_record_on_launch": false,
						"ipv6_cidr_block":                                null,
						"ipv6_native":                                    false,
						"map_customer_owned_ip_on_launch":                null,
						"map_public_ip_on_launch":                        false,
						"outpost_arn":                                    null,
						"tags": {
							"Owner":   "Demo",
							"Purpose": "Lab",
						},
						"tags_all": {
							"Owner":   "Demo",
							"Purpose": "Lab",
						},
						"timeouts": null,
					},
				},
				{
					"address":        "aws_vpc.demo",
					"mode":           "managed",
					"name":           "demo",
					"provider_name":  "registry.terraform.io/hashicorp/aws",
					"schema_version": 1,
					"sensitive_values": {
						"tags_all": {},
					},
					"type": "aws_vpc",
					"values": {
						"assign_generated_ipv6_cidr_block": null,
						"cidr_block":                       "10.0.0.0/16",
						"enable_dns_support":               true,
						"instance_tenancy":                 "default",
						"ipv4_ipam_pool_id":                null,
						"ipv4_netmask_length":              null,
						"ipv6_ipam_pool_id":                null,
						"ipv6_netmask_length":              null,
						"tags":                             null,
					},
				},
			],
		},
	},
	"prior_state": {
		"format_version":    "1.0",
		"terraform_version": "1.1.4",
		"values": {
			"root_module": {
				"resources": [
					{
						"address":        "data.aws_availability_zones.available",
						"mode":           "data",
						"name":           "available",
						"provider_name":  "registry.terraform.io/hashicorp/aws",
						"schema_version": 0,
						"sensitive_values": {
							"group_names": [
								false,
							],
							"names": [
								false,
								false,
								false,
								false,
								false,
								false,
							],
							"zone_ids": [
								false,
								false,
								false,
								false,
								false,
								false,
							],
						},
						"type": "aws_availability_zones",
						"values": {
							"all_availability_zones": null,
							"exclude_names":          null,
							"exclude_zone_ids":       null,
							"filter":                 null,
							"group_names": [
								"us-east-1",
							],
							"id": "us-east-1",
							"names": [
								"us-east-1a",
								"us-east-1b",
								"us-east-1c",
								"us-east-1d",
								"us-east-1e",
								"us-east-1f",
							],
							"state": "available",
							"zone_ids": [
								"use1-az2",
								"use1-az4",
								"use1-az6",
								"use1-az1",
								"use1-az3",
								"use1-az5",
							],
						},
					},
				],
			},
		},
	},
	"resource_changes": [
		{
			"address": "aws_instance.demo_server",
			"change": {
				"actions": [
					"create",
				],
				"after": {
					"ami":                  "ami-02e136e904f3da870",
					"availability_zone":    "us-east-1a",
					"credit_specification": [],
					"get_password_data":    false,
					"hibernation":          null,
					"iam_instance_profile": null,
					"instance_type":        "t2.micro",
					"launch_template":      [],
					"source_dest_check":    true,
					"tags": {
						"Owner":   "Demo",
						"Purpose": "Lab",
					},
					"tags_all": {
						"Owner":   "Demo",
						"Purpose": "Lab",
					},
					"timeouts":    null,
					"volume_tags": null,
				},
				"after_sensitive": {
					"capacity_reservation_specification": [],
					"credit_specification":               [],
					"ebs_block_device":                   [],
					"enclave_options":                    [],
					"ephemeral_block_device":             [],
					"ipv6_addresses":                     [],
					"launch_template":                    [],
					"metadata_options":                   [],
					"network_interface":                  [],
					"root_block_device":                  [],
					"secondary_private_ips":              [],
					"security_groups":                    [],
					"tags":                               {},
					"tags_all":                           {},
					"vpc_security_group_ids":             [],
				},
				"after_unknown": {
					"arn": true,
					"associate_public_ip_address":        true,
					"capacity_reservation_specification": true,
					"cpu_core_count":                     true,
					"cpu_threads_per_core":               true,
					"credit_specification":               [],
					"disable_api_termination":            true,
					"ebs_block_device":                   true,
					"ebs_optimized":                      true,
					"enclave_options":                    true,
					"ephemeral_block_device":             true,
					"host_id":                            true,
					"id":                                 true,
					"instance_initiated_shutdown_behavior": true,
					"instance_state":                       true,
					"ipv6_address_count":                   true,
					"ipv6_addresses":                       true,
					"key_name":                             true,
					"launch_template":                      [],
					"metadata_options":                     true,
					"monitoring":                           true,
					"network_interface":                    true,
					"outpost_arn":                          true,
					"password_data":                        true,
					"placement_group":                      true,
					"placement_partition_number":           true,
					"primary_network_interface_id":         true,
					"private_dns":                          true,
					"private_ip":                           true,
					"public_dns":                           true,
					"public_ip":                            true,
					"root_block_device":                    true,
					"secondary_private_ips":                true,
					"security_groups":                      true,
					"subnet_id":                            true,
					"tags":                                 {},
					"tags_all":                             {},
					"tenancy":                              true,
					"user_data":                            true,
					"user_data_base64":                     true,
					"vpc_security_group_ids":               true,
				},
				"before":           null,
				"before_sensitive": false,
			},
			"mode":          "managed",
			"name":          "demo_server",
			"provider_name": "registry.terraform.io/hashicorp/aws",
			"type":          "aws_instance",
		},
		{
			"address": "aws_subnet.external",
			"change": {
				"actions": [
					"create",
				],
				"after": {
					"assign_ipv6_address_on_creation":                false,
					"availability_zone":                              "us-east-1b",
					"cidr_block":                                     "10.0.2.0/24",
					"customer_owned_ipv4_pool":                       null,
					"enable_dns64":                                   false,
					"enable_resource_name_dns_a_record_on_launch":    false,
					"enable_resource_name_dns_aaaa_record_on_launch": false,
					"ipv6_cidr_block":                                null,
					"ipv6_native":                                    false,
					"map_customer_owned_ip_on_launch":                null,
					"map_public_ip_on_launch":                        false,
					"outpost_arn":                                    null,
					"tags": {
						"Owner":   "Demo",
						"Purpose": "Lab",
					},
					"tags_all": {
						"Owner":   "Demo",
						"Purpose": "Lab",
					},
					"timeouts": null,
				},
				"after_sensitive": {
					"tags":     {},
					"tags_all": {},
				},
				"after_unknown": {
					"arn": true,
					"availability_zone_id": true,
					"id": true,
					"ipv6_cidr_block_association_id":      true,
					"owner_id":                            true,
					"private_dns_hostname_type_on_launch": true,
					"tags":     {},
					"tags_all": {},
					"vpc_id":   true,
				},
				"before":           null,
				"before_sensitive": false,
			},
			"mode":          "managed",
			"name":          "external",
			"provider_name": "registry.terraform.io/hashicorp/aws",
			"type":          "aws_subnet",
		},
		{
			"address": "aws_subnet.internal",
			"change": {
				"actions": [
					"create",
				],
				"after": {
					"assign_ipv6_address_on_creation":                false,
					"availability_zone":                              "us-east-1a",
					"cidr_block":                                     "10.0.1.0/24",
					"customer_owned_ipv4_pool":                       null,
					"enable_dns64":                                   false,
					"enable_resource_name_dns_a_record_on_launch":    false,
					"enable_resource_name_dns_aaaa_record_on_launch": false,
					"ipv6_cidr_block":                                null,
					"ipv6_native":                                    false,
					"map_customer_owned_ip_on_launch":                null,
					"map_public_ip_on_launch":                        false,
					"outpost_arn":                                    null,
					"tags": {
						"Owner":   "Demo",
						"Purpose": "Lab",
					},
					"tags_all": {
						"Owner":   "Demo",
						"Purpose": "Lab",
					},
					"timeouts": null,
				},
				"after_sensitive": {
					"tags":     {},
					"tags_all": {},
				},
				"after_unknown": {
					"arn": true,
					"availability_zone_id": true,
					"id": true,
					"ipv6_cidr_block_association_id":      true,
					"owner_id":                            true,
					"private_dns_hostname_type_on_launch": true,
					"tags":     {},
					"tags_all": {},
					"vpc_id":   true,
				},
				"before":           null,
				"before_sensitive": false,
			},
			"mode":          "managed",
			"name":          "internal",
			"provider_name": "registry.terraform.io/hashicorp/aws",
			"type":          "aws_subnet",
		},
		{
			"address": "aws_vpc.demo",
			"change": {
				"actions": [
					"create",
				],
				"after": {
					"assign_generated_ipv6_cidr_block": null,
					"cidr_block":                       "10.0.0.0/16",
					"enable_dns_support":               true,
					"instance_tenancy":                 "default",
					"ipv4_ipam_pool_id":                null,
					"ipv4_netmask_length":              null,
					"ipv6_ipam_pool_id":                null,
					"ipv6_netmask_length":              null,
					"tags":                             null,
				},
				"after_sensitive": {
					"tags_all": {},
				},
				"after_unknown": {
					"arn": true,
					"default_network_acl_id":         true,
					"default_route_table_id":         true,
					"default_security_group_id":      true,
					"dhcp_options_id":                true,
					"enable_classiclink":             true,
					"enable_classiclink_dns_support": true,
					"enable_dns_hostnames":           true,
					"id": true,
					"ipv6_association_id":                  true,
					"ipv6_cidr_block":                      true,
					"ipv6_cidr_block_network_border_group": true,
					"main_route_table_id":                  true,
					"owner_id":                             true,
					"tags_all":                             true,
				},
				"before":           null,
				"before_sensitive": false,
			},
			"mode":          "managed",
			"name":          "demo",
			"provider_name": "registry.terraform.io/hashicorp/aws",
			"type":          "aws_vpc",
		},
		{
			"address": "module.security_group.aws_security_group.this_name_prefix[0]",
			"change": {
				"actions": [
					"create",
				],
				"after": {
					"description":            "Security Group managed by Terraform",
					"name_prefix":            "my-sg-",
					"revoke_rules_on_delete": false,
					"tags": {
						"Name": "my-sg",
					},
					"tags_all": {
						"Name": "my-sg",
					},
					"timeouts": {
						"create": "10m",
						"delete": "15m",
					},
				},
				"after_sensitive": {
					"egress":   [],
					"ingress":  [],
					"tags":     {},
					"tags_all": {},
					"timeouts": {},
				},
				"after_unknown": {
					"arn":      true,
					"egress":   true,
					"id":       true,
					"ingress":  true,
					"name":     true,
					"owner_id": true,
					"tags":     {},
					"tags_all": {},
					"timeouts": {},
					"vpc_id":   true,
				},
				"before":           null,
				"before_sensitive": false,
			},
			"index":          0,
			"mode":           "managed",
			"module_address": "module.security_group",
			"name":           "this_name_prefix",
			"provider_name":  "registry.terraform.io/hashicorp/aws",
			"type":           "aws_security_group",
		},
		{
			"address": "module.security_group.aws_security_group_rule.egress_rules[0]",
			"change": {
				"actions": [
					"create",
				],
				"after": {
					"cidr_blocks": [
						"0.0.0.0/0",
					],
					"description": "All protocols",
					"from_port":   -1,
					"ipv6_cidr_blocks": [
						"::/0",
					],
					"prefix_list_ids": [],
					"protocol":        "-1",
					"self":            false,
					"to_port":         -1,
					"type":            "egress",
				},
				"after_sensitive": {
					"cidr_blocks": [
						false,
					],
					"ipv6_cidr_blocks": [
						false,
					],
					"prefix_list_ids": [],
				},
				"after_unknown": {
					"cidr_blocks": [
						false,
					],
					"id": true,
					"ipv6_cidr_blocks": [
						false,
					],
					"prefix_list_ids":          [],
					"security_group_id":        true,
					"source_security_group_id": true,
				},
				"before":           null,
				"before_sensitive": false,
			},
			"index":          0,
			"mode":           "managed",
			"module_address": "module.security_group",
			"name":           "egress_rules",
			"provider_name":  "registry.terraform.io/hashicorp/aws",
			"type":           "aws_security_group_rule",
		},
		{
			"address": "module.security_group.aws_security_group_rule.ingress_rules[0]",
			"change": {
				"actions": [
					"create",
				],
				"after": {
					"cidr_blocks": [
						"0.0.0.0/0",
					],
					"description":      "HTTP",
					"from_port":        80,
					"ipv6_cidr_blocks": [],
					"prefix_list_ids":  [],
					"protocol":         "tcp",
					"self":             false,
					"to_port":          80,
					"type":             "ingress",
				},
				"after_sensitive": {
					"cidr_blocks": [
						false,
					],
					"ipv6_cidr_blocks": [],
					"prefix_list_ids":  [],
				},
				"after_unknown": {
					"cidr_blocks": [
						false,
					],
					"id":                       true,
					"ipv6_cidr_blocks":         [],
					"prefix_list_ids":          [],
					"security_group_id":        true,
					"source_security_group_id": true,
				},
				"before":           null,
				"before_sensitive": false,
			},
			"index":          0,
			"mode":           "managed",
			"module_address": "module.security_group",
			"name":           "ingress_rules",
			"provider_name":  "registry.terraform.io/hashicorp/aws",
			"type":           "aws_security_group_rule",
		},
		{
			"address": "module.security_group.aws_security_group_rule.ingress_rules[1]",
			"change": {
				"actions": [
					"create",
				],
				"after": {
					"cidr_blocks": [
						"0.0.0.0/0",
					],
					"description":      "All IPV4 ICMP",
					"from_port":        -1,
					"ipv6_cidr_blocks": [],
					"prefix_list_ids":  [],
					"protocol":         "icmp",
					"self":             false,
					"to_port":          -1,
					"type":             "ingress",
				},
				"after_sensitive": {
					"cidr_blocks": [
						false,
					],
					"ipv6_cidr_blocks": [],
					"prefix_list_ids":  [],
				},
				"after_unknown": {
					"cidr_blocks": [
						false,
					],
					"id":                       true,
					"ipv6_cidr_blocks":         [],
					"prefix_list_ids":          [],
					"security_group_id":        true,
					"source_security_group_id": true,
				},
				"before":           null,
				"before_sensitive": false,
			},
			"index":          1,
			"mode":           "managed",
			"module_address": "module.security_group",
			"name":           "ingress_rules",
			"provider_name":  "registry.terraform.io/hashicorp/aws",
			"type":           "aws_security_group_rule",
		},
	],
	"terraform_version": "1.1.4",
}
