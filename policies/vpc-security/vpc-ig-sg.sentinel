import "tfplan/v2" as tfplan
import "tfplan-functions" as plan
import "types"

forbidden_cidrs = ["0.0.0.0/0"]
forbidden_port = 22
forbidden_to_port = 22
forbidden_from_port = 22

aws_security_group_rules = filter tfplan.resource_changes as address, rc {
	rc.type is "aws_security_group_rule" and
		rc.mode is "managed" and
		(rc.change.actions contains "create" or rc.change.actions contains "update" or
			rc.change.actions contains "read" or
			rc.change.actions contains "no-op") and
		rc.change.after.type is "ingress"
}

violatingSGRulesCount = 0

for aws_security_group_rules as address, sgr {
	if sgr.change.after.cidr_blocks else null is not null and
		types.type_of(sgr.change.after.cidr_blocks) is "list" and
		sgr.change.after.cidr_blocks contains "0.0.0.0/0" and
		sgr.change.after.from_port else null is null and
		sgr.change.after.to_port else null is not null and
		sgr.change.after.to_port is forbidden_to_port {
		violatingSGRulesCount += 1
		print("SG Rule Ingress Violation:", address, "has port", forbidden_port,
			"(SSH) open to", forbidden_cidrs, "that is not allowed")
		print("  Ingress Rule has from_port that is null or undefined")
		print("   and Ingress Rule has to_port with value", sgr.change.after.to_port)
		print("  The to_port and from_port both need to be set to an integer",
			"range or of equal")
		print("   value to each other that is either less than or greater than", forbidden_port)
	} else if sgr.change.after.cidr_blocks else null is not null and
		types.type_of(sgr.change.after.cidr_blocks) is "list" and
		sgr.change.after.cidr_blocks contains "0.0.0.0/0" and
		sgr.change.after.from_port else null is not null and
		sgr.change.after.from_port is forbidden_from_port and
		sgr.change.after.to_port else null is null {
		violatingSGRulesCount += 1
		print("SG Rule Ingress Violation:", address, "has port", forbidden_port,
			"(SSH) open to", forbidden_cidrs, "that is not allowed")
		print("  Ingress Rule has from_port with value", sgr.change.after.from_port)
		print("   and Ingress Rule has to_port that is null or undefined")
		print("  The to_port and from_port both need to be set to an integer",
			"range or of equal")
		print("   value to each other that is either less than or greater than", forbidden_port)
	} else if sgr.change.after.cidr_blocks else null is not null and
		types.type_of(sgr.change.after.cidr_blocks) is "list" and
		sgr.change.after.cidr_blocks contains "0.0.0.0/0" and
		sgr.change.after.from_port else null is not null and
		sgr.change.after.from_port <= forbidden_from_port and
		sgr.change.after.to_port else null is not null and
		sgr.change.after.to_port >= forbidden_to_port {
		violatingSGRulesCount += 1
		print("SG Rule Ingress Violation:", address, "has port", forbidden_port,
			"(SSH) open to", forbidden_cidrs, "that is not allowed")
		print("  Ingress Rule has from_port with value", sgr.change.after.from_port,
			"that is less than or equal to", forbidden_from_port)
		print("   and Ingress Rule has to_port with value", sgr.change.after.to_port,
			"that is greater than or equal to", forbidden_to_port)
		print("  The to_port and from_port both need to be set to an integer",
			"range or of equal")
		print("   value to each other that is either less than or greater than", forbidden_port)
	} else if sgr.change.after.cidr_blocks else null is not null and
		types.type_of(sgr.change.after.cidr_blocks) is "list" and
		sgr.change.after.cidr_blocks contains "0.0.0.0/0" and
		sgr.change.after.to_port else null is not null and
		sgr.change.after.to_port is forbidden_port {
		violatingSGRulesCount += 1
		print("SG Rule Ingress Violation:", address, "has port", forbidden_port,
			"(SSH) open to", forbidden_cidrs, "that is not allowed")
		print("  Ingress Rule has to_port with value", sgr.change.after.to_port)
		print("  The to_port and from_port both need to be set to an integer",
			"range or of equal")
		print("   value to each other that is either less than or greater than", forbidden_port)
	}
}

allSGs = plan.find_resources("aws_security_group")

violatingSGsCount = 0
for allSGs as address, sg {

	ingressRules = plan.find_blocks(sg, "ingress")

	violatingCidr = plan.filter_attribute_contains_items_from_list(ingressRules,
		"cidr_blocks", forbidden_cidrs, false)

	violatingFromPortLess = plan.filter_attribute_less_than_equal_to_value(ingressRules,
		"from_port", forbidden_from_port, false)

	violatingToPortGreater = plan.filter_attribute_greater_than_equal_to_value(ingressRules,
		"to_port", forbidden_to_port, false)

	if length(violatingCidr["messages"]) > 0 and length(violatingFromPortLess["messages"]) > 0 and
		length(violatingToPortGreater["messages"]) > 0 {
		violatingSGsCount += 1
		print("SG Ingress Violation:", address, "has port", forbidden_port,
			"(SSH) open to", forbidden_cidrs, "that is not allowed")
		plan.print_violations(violatingFromPortLess["messages"], "  Ingress Rule")
		plan.print_violations(violatingToPortGreater["messages"], "   and Ingress Rule")
		print("  The to_port and from_port both need to be set to an integer",
			"range or of equal")
		print("   value to each other that is either less than or greater than", forbidden_port)
	}
}

validated = violatingSGsCount is 0 and violatingSGRulesCount is 0

main = rule {
	validated is true
}
