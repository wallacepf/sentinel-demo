name: sentinel-pipe
on: [push, workflow_dispatch]
jobs:
  test-sentinel-policy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: curl https://releases.hashicorp.com/sentinel/0.18.4/sentinel_0.18.4_linux_amd64.zip --output sentinel.zip
      - run: unzip sentinel.zip
      - run: ./sentinel version
      - run: ./sentinel fmt *.sentinel
      - run: ./sentinel test
  create-policy-set:
    needs: test-sentinel-policy
    runs-on: ubuntu-latest
    env:
      TFE_TOKEN: ${{ secrets.TF_API_TOKEN }}
      VCS_OAUTH_KEY: ${{ secrets.VCS_OAUTH_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup TF
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install terraform
          cat <<EOF > .terraformrc
          credentials "app.terraform.io" {
              token = "${{ secrets.TF_API_TOKEN }}"   
          }
          EOF
          cp .terraformrc ~/
      # - name: Setup VARS
        # working-directory: ./tf/sentinel-policy-creation
        # run: |
        #   echo "token = \"${TFE_TOKEN}\"" > terraform.auto.tfvars
        #   echo "vcs_oauth_key = \"${VCS_OAUTH_KEY}\"" >> terraform.auto.tfvars
        #   terraform fmt
        #   cat terraform.auto.tfvars
      - name: Terraform Format
        working-directory: ./tf/sentinel-policy-creation
      #   id: fmt
        run: terraform fmt -check
      - name: Terraform Init
        working-directory: ./tf/sentinel-policy-creation
        # id: init
        run: terraform init
      - name: Terraform Validate
        working-directory: ./tf/sentinel-policy-creation
        # id: validate
        run: terraform validate -no-color
      - name: Terraform Plan
        working-directory: ./tf/sentinel-policy-creation
      #   id: plan
      #   if: github.event_name == 'pull_request'
        run: terraform plan -no-color -var="vcs_oauth_key=${{ secrets.VCS_OAUTH_KEY }}"
      #   continue-on-error: true
      # - name: Update Pull Request
      #   uses: actions/github-script@0.9.0
      #   if: github.event_name == 'pull_request'
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

      #       <details><summary>Show Plan</summary>

      #       \`\`\`\n
      #       ${process.env.PLAN}
      #       \`\`\`

      #       </details>

      #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

      #       github.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })
      # - name: Terraform Plan Status
      #   working-directory: ./tf/sentinel-policy-creation
      #   if: steps.plan.outcome == 'failure'
      #   run: exit 1
      # - name: Terraform Apply
      #   env:
      #     TF_VAR_vcs_oauth_key: ${{ secrets.VCS_OAUTH_KEY }}
      #   working-directory: ./tf/sentinel-policy-creation
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #   run: terraform apply -auto-approve








